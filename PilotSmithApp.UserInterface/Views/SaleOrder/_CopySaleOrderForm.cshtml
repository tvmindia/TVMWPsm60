
@model PilotSmithApp.UserInterface.Models.SaleOrderViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateSaleOrder", "SaleOrder", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessSaleOrder", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "SaleOrderForm" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.Hidden("hdnCopyFrom", Model.CopyFrom)
    @Html.HiddenFor(model => model.CopyFrom, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.CopySaleOrderNo, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalStatus, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ApproverLevel, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    @Html.HiddenFor(model => model.IsFileExist, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.DocumentStatus.Description, htmlAttributes: new { @class = "", @id = "hdnDescription" })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                @{
                    if (Model.CopyFrom != Guid.Empty)
                    {

                        <div class="col-md-12">
                            <div class="col-md-12 form-control newinput" style="background-color:#f7d1a7 !important;">

                                @if (Model.IsFileExist == 1)
                                {
                                    <span style="font-size:12px">Copied From SaleOrder :</span><span style="font-weight: bold;font-size:12px;">@Model.CopySaleOrderNo</span>
                                    <a onclick="RedirectingCopiedSaleOrder()" style="font-size:10px;cursor:pointer;">Open in new tab</a>
                                    <a href="/SaleOrder?ID=@Model.CopyFrom" id="anchorOpenSODInTab" target="_blank" style="font-size:10px"></a>
                                }
                                else
                                {
                                    <span style="font-size:12px">Copied From SaleOrder :</span><span style="font-weight: bold;font-size:12px;">@Model.CopySaleOrderNo</span>
                                    <span style="font-weight: bold;font-size:12px;color:red;"><i>(Deleted)</i></span>
                                    @*<a onclick="RedirectingCopiedSaleOrder()" style="font-size:12px">Quotation Deleted</a>
                                        <a href="/SaleOrder?ID=@Model.CopyFrom" id="anchorOpenSODInTab" target="_blank" style="font-size:10px"></a>*@
                                }

                            </div>

                        </div>

                    }
                }

                <!--Currency start-->
                <div class="col-md-12 no-padding" style="margin-top: 10px;">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12" style="display:inline-flex">
                            @Html.HiddenFor(model => model.CurrencyCode, htmlAttributes: new { @class = "", @id = "hdnCurrencyCode" })
                            @Html.HiddenFor(model => model.CurrencyRate, htmlAttributes: new { @class = "", @id = "hdnCurrencyRate" })
                            @Html.Label("Select currency", htmlAttributes: new { @class = "control-label lblrequired" })
                            <label class="control-label lblrequired lblrate">Rate</label>
                        </div>
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12" style="display:inline-flex;font-weight:500;">
                                @*<select class="form-control newinput" disabled>
                                        <option>INR</option>
                                    </select>
                                    <input class="form-control newinput" type="number" value="1" readonly style="width:100%;border-left:1px solid black;text-align:right;" />*@
                                @if (Model.IsUpdate)
                                {
                                    if (Model.LatestApprovalStatus == 4 || Model.LatestApprovalStatus == 1 || Model.LatestApprovalStatus == 9)
                                    {
                                        <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                            <option>@Model.CurrencyCode</option>
                                        </select>
                                        <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;border-bottom:none;text-align:right;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span>@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                        <input class="form-control newinput" type="number" value="@Model.CurrencyRate" readonly style="width:100%;text-align:left;min-width:70px;" title="Cannot change rate" />
                                    }
                                    else if (Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == 3)
                                    {
                                        <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                            <option>@Model.CurrencyCode</option>
                                        </select>
                                        <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;border-bottom:none;text-align:right;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span>@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                        @*<input class="form-control newinput" type="number" value="@Model.CurrencyRate" readonly style="width:100%;text-align:left;min-width:70px;" title="Cannot change rate" />*@
                                        <input class="form-control newinput changeCurrency" type="number" min="0" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" value="@Model.CurrencyRate" />
                                    }
                                }
                                else
                                {
                                    <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                        <option>@Model.CurrencyCode</option>
                                    </select>
                                    <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;border-bottom:none;text-align:right;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span>@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                    <input class="form-control newinput changeCurrency" type="number" value="@Model.CurrencyRate" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" />

                                    @*<select class="form-control newinput changeCurrency" style="width:100%;min-width:66px;">
                                            @{
                                                foreach (var cur in Model.Currency.CurrencyList)
                                                {
                                                    <option value="@cur.Code" title="@cur.Description">@cur.Code</option>
                                                }
                                            }

                                        </select>
                                        <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;text-align:right;border-bottom:none;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span id="lblCurrencyCode">@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                        <input class="form-control newinput changeCurrency" type="number" min="0" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" value="@Model.CurrencyRate" />*@

                                }
                                @*<select class="form-control newinput" disabled>
                                        <option>INR</option>
                                    </select>*@
                                <input class="form-control newinput" type="text" readonly style="width:100%;text-align:left;background-color:rgba(2, 166, 143, 0.06);border-bottom:none;min-width:45px;" value="INR" />
                            </div>
                        </div>
                    </div>
                    @if (!Model.IsUpdate)
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info currencyNote" style="background-color: #e8b67f!important; border-left: 8px solid #e66911;color: #543131 !important;padding: 5px 0px 6.5px 10px; margin: 0px;">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Currency Cannot change in copy mode</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info currencyNote" style="background-color: #e8b67f!important; border-left: 8px solid #e66911;color: #543131 !important;padding: 5px 0px 6.5px 10px; margin: 0px;">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Currency cannot change in edit mode</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>
                <!--Currency end-->

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SaleOrderNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.SaleOrderNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.SaleOrderNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (Model.IsUpdate)
                {
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SaleOrderDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.SaleOrderDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off", @data_toggle = "popover", @data_content = "Select date with in financial year", @data_placement = "top" } })
                            @Html.ValidationMessageFor(model => model.SaleOrderDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SaleOrderDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.SaleOrderDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.SaleOrderDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SaleOrderRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.SaleOrderRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.SaleOrderRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ExpectedDelvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ExpectedDelvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ExpectedDelvDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SaleOrderNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.SaleOrderNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                            @Html.ValidationMessageFor(model => model.SaleOrderNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SaleOrderDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.SaleOrderDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.SaleOrderDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.SaleOrderRefNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.SaleOrderRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                            @Html.ValidationMessageFor(model => model.SaleOrderRefNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ExpectedDelvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ExpectedDelvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.ExpectedDelvDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divBankSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBankRequired", "")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnBankdisabled", false)
                        @Html.HiddenFor(model => model.BankCode, htmlAttributes: new { @class = "", @id = "hdnBankCode" })
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReferredByCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divReferredByCodeSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnReferredByRequired", "")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnReferredBydisabled", false)
                        @Html.HiddenFor(model => model.ReferredByCode, htmlAttributes: new { @class = "", @id = "hdnReferredByCode" })
                    </div>
                    @*<div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                <div class="divDocumentStatusSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                                </div>
                            </div>

                            @Html.Hidden("hdnDocumentStatusRequired", "required")
                            @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                        </div>*@
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12">
                                <span class="form-control newinput" style="background-color:#eeeeee">@Model.Branch.Description</span>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <div class="divBranchSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                </div>
                            </div>
                        }
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBranchRequired", "required")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnBranchdisabled", false)
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divPreparedBySelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnPreparedByRequired", "")
                        @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnPreparedBy" })
                    </div>
                </div>
            </div>
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        @if (Model.IsUpdate)
                        {
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">Document Status</div>
                            </div>
                            <div class="form-group col-md-12">
                                <label class="switch switch-flat">
                                    <input class="switch-input" type="checkbox" checked />
                                    <span class="switch-label" data-on="Open" data-off="Closed"></span>
                                    <span class="switch-handle"></span>
                                </label>
                            </div>
                        }
                        @*<div class="form-group col-md-12">
                                <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                            </div>*@
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Email Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.EmailSentYN == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else if (Model.EmailSentYN == true)
                            {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Approval Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.SaleOrderNo" documentType="SOD" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Customer Details</div>
            <div class="form-group col-md-6">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput" style="background-color:#eeeeee">@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                    }

                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
            </div>
            <div class="form-group col-md-12">
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.MailingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.MailingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.MailingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ShippingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.ShippingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                SaleOrder Details
                @if (Model.IsDocLocked || !Model.IsUpdate)
                {
                    if (Model.LatestApprovalStatus == 3 || Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == null)
                    {
                        <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                        <a class="btn btn-openid pull-right" onclick="AddSaleOrderDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                    else
                    {
                        <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                        <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                }
                else
                {
                    <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                    <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.OtherChargesDetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblSaleOrderDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:20%">Product</th>
                            <th style="width:15%">HSN Code</th>
                            <th style="width:5%">Quantity</th>
                            <th style="width:10%">Rate(₹)</th>
                            <th style="width:5%">Discount(₹)</th>
                            <th style="width:10%">Taxable(₹)</th>
                            <th style="width:10%">GST(₹)</th>
                            <th style="width:10%">Cess</th>
                            <th style="width:10%">Total(₹)</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="form-group col-md-7">
                <table id="tblSaleOrderOtherChargesDetailList" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:20%">Other Charge</th>
                            <th style="width:10%">SAC Code</th>
                            <th style="width:10%">Charge Amount(₹)</th>
                            <th style="width:10%">GST(₹)</th>
                            <th style="width:10%">Additional Tax(₹)</th>
                            <th style="width:10%">Total(₹)</th>
                            <th style="width:10%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <div class="col-md-5" style="padding-right:1.5%">
                <table class="table dataTable no-footer DetailSummerybox">
                    <tbody>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblItemTotal">Total Taxable Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblItemTotal">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblTaxTotal">GST Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblTaxTotal">00.00</label>
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblCessAmount">Cess Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblCessAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Other Charge Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblOtherChargeAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Gross Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrossAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label " for="Discount">Cash Discount</label>
                            </td>
                            <td style="text-align: right;padding: 0px!important">
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control newinput ApplyCurrency Amount", onchange = "CalculateGrandTotal(this.value)", @onkeypress = "return isNumber(event)" } })
                            </td>
                        </tr>
                        <tr class="odd">
                            <td style="text-align: right">
                                <label class="control-label " for="lblGrandTotal">Grand Total</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrandTotal" style="font-weight: bold !important;">00.00</label>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Other Details</div>
            <div class="form-group col-md-12">
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PurchaseOrdNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.PurchaseOrdNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrdNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PurchaseOrdDateFormatted, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.PurchaseOrdDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrdDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="form-group col-md-12">
                @*<div class="col-md-4 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.CarrierCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.Action("CarrierSelectList", "Carrier", new { required = "" })
                            @Html.HiddenFor(model => model.CarrierCode, htmlAttributes: new { @class = "", @id = "hdnCarrierCode" })
                        </div>
                    </div>*@
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.TermReferenceNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.TermReferenceNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.TermReferenceNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.AdvanceAmount, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.AdvanceAmount, new { htmlAttributes = new { @class = "form-control newinput Amount", @onkeypress = "return isNumber(event)" } })
                        @Html.ValidationMessageFor(model => model.AdvanceAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Notes</div>

            <div class="form-group col-md-12">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Attachments</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateSaleOrder" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
                    }
<script>
    $(document).ready(function () {
        debugger;
        $('[data-toggle="popover"]').popover({
        });
        try {

            debugger;
            $('.switch-input').on('change', function () {
                debugger;
                var isChecked = $(this).is(':checked');
                var selectedData;
                var $switchLabel = $('.switch-label');
                console.log('isChecked: ' + isChecked);

                if (isChecked) {
                    selectedData = $switchLabel.attr('data-on');

                } else {
                    selectedData = $switchLabel.attr('data-off');
                }


                $.get("DocumentStatus/CloseDocument/?id=" + $('#SaleOrderForm #ID').val() + "&doctype=SOD" + "&docstatus=" + selectedData, function (data) {
                    debugger;

                    if (data == "1") {
                        BindOrReloadSaleOrderTable();
                        //notyAlert('success', "Document status changed successfully!");
                    }
                    else {
                        notyAlert('error', "Failed to change document status!");
                    }

                });

            });


        }
        catch (e) {

        }

        try {
            $.validator.unobtrusive.parse("#SaleOrderForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('.divPreparedBySelectList').load('/Employee/PreparedBySelectList?required=' + $('#hdnPreparedByRequired').val())
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=SOD&required=' + $('#hdnDocumentStatusRequired').val())
            $('.divReferredByCodeSelectList').load('/ReferencePerson/ReferencePersonSelectList?required=' + $('#hdnReferredByRequired').val())
            $('.divBankSelectList').load('/Bank/BankSelectList?required=' + $('#hdnBankRequired').val())
            @if (Model.IsUpdate)
            {
                  <text>
            if ($('#hdnCurrencyCode').val() == "INR") {
                $('#idCurRateForAutofocus').prop("disabled", true)
            }

            var saleorderDate = $('#SaleOrderDateFormatted').val();
            function getCurrentFinancialYear(saleorderDate) {
                debugger;
                var startYear = "";
                var endYear = "";
                var docDate = new Date(saleorderDate);
                if ((docDate.getMonth() + 1) <= 3) {
                    startYear = docDate.getFullYear() - 1;
                    endYear = docDate.getFullYear();
                }
                else {
                    startYear = docDate.getFullYear();
                    endYear = docDate.getFullYear() + 1;
                }
                return { startDate: "01-Apr-" + startYear, endDate: "31-Mar-" + endYear };
            if ($('#hdnCurrencyCode').val() == "INR") {
                $('#idCurRateForAutofocus').prop("disabled", true)
            }
            $('#SaleOrderDateFormatted').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true,
                startDate: getCurrentFinancialYear(saleorderDate).startDate,
                endDate: getCurrentFinancialYear(saleorderDate).endDate
            });
            </text>
            </text>
            }
            else
            {
                <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () { });


            if ($('#hdnCurrencyCode').val() == "INR") {
                $('#idCurRateForAutofocus').prop("disabled", true)
            }

            </text>
            }
            @if ((!Model.IsUpdate))
             {
                 <text>
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });

            $('.changeCurrency').change(function () {
                debugger;
                if (this.nodeName == "INPUT") {
                    $('#hdnCurrencyRate').val(this.value)
                }
            });


            </text>
             }
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderDateFormatted,#ExpectedDelvDateFormatted').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#SaleOrderForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#SaleOrderForm #ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#SaleOrderForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#SaleOrderForm #ID').val();
                }


                FileObject.ParentType = "SaleOrder";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderGradeCode').select2({});
            $('#QuoteID').val($('#hdnQuoteID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnQuoteID').val());

            $('#EnquiryID').val($('#hdnEnquiryID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnEnquiryID').val());

            $('.select2').addClass('form-control newinput');


            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });

        }
        catch (e) {
            console.log(e.message);
        }



        try {
            $('[name="DocumentType"]').change(function () {
                if (this.value == "Quotation") {
                    ResetSaleOrder(this);
                    //$('#divEnquirySelectList').hide();
                    //$('#divQuotationSelectList').show();
                    //$('#QuoteID').prop('disabled', false);
                    //$('#EnquiryID').prop('disabled', true);
                }
                else if (this.value == "Enquiry") {
                    ResetSaleOrder(this);
                    //$('#divEnquirySelectList').show();
                    //$('#divQuotationSelectList').hide();
                    //$('#QuoteID').prop('disabled', true);
                    //$('#EnquiryID').prop('disabled', false);
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            if ($('#SaleOrderForm #IsDocLocked').val() == "False" && $('#SaleOrderForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }

            debugger;
            if ($('#LatestApprovalStatus').val() != '0' && $('#LatestApprovalStatus').val()!="") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Approved");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Approved");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Approved");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

