@model PilotSmithApp.UserInterface.Models.DeliveryChallanViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateDeliveryChallan", "DeliveryChallan", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessDeliveryChallan", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "DeliveryChallanForm" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">

                <div class="col-md-12" style="font-size:14px">
                    @Html.Label("Create Document From: ")
                    <span style="margin-left:10px">
                        @Html.RadioButtonFor(model => model.DocumentType, "SaleOrder", new { @checked = true }) @Html.Label("SaleOrder")
                    </span>
                    <span style="margin-left:10px">
                        @Html.RadioButtonFor(model => model.DocumentType, "ProductionOrder") @Html.Label("ProductionOrder")
                    </span>
                </div>

                <div class="col-md-12 no-padding" id="divSaleOrderSelectList">
                    <div class="col-md-12">
                        @Html.Label("Search and select a SaleOrder", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search SaleOrder", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)" })
                    </div>
                    @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                </div>

                <div class="col-md-12 no-padding" id="divProductionOrderSelectList" style="display:none;">
                    <div class="col-md-12">
                        @Html.Label("Search and select a ProductionOrder", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.ProdOrderID, Model.ProductionOrderSelectList, "Search ProductionOrder", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnProdOrderID').val(this.value)" })
                    </div>
                    @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "", @id = "hdnProdOrderID" })
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DelvChallanNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.DelvChallanNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.DelvChallanNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DelvChallanRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.DelvChallanRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.DelvChallanRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DelvChallanDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.DelvChallanDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.DelvChallanDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divAttendedByIDSelectList">
                            @Html.Action("AttendedBySelectList", "Employee", new { required = "", postingParams = "ResponsiblePersonID" })
                        </div>
                        @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnAttendedByID" })
                    </div>
                </div>


                <div class="col-md-12 no-padding">
                    <div class="col-md-12 ">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divCustomerSelectList">
                            @Html.Action("CustomerSelectList", "Customer", new { required = "" })
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>


                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divBranchSelectList">
                            @Html.Action("BranchSelectList", "Branch", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPlantSelectList">
                            @Html.Action("PlantSelectList", "Plant", new { required = "" })
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPlantRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnPlantdisabled", false)
                    @Html.HiddenFor(model => model.PlantCode, htmlAttributes: new { @class = "", @id = "hdnPlantCode" })
                </div>

            </div>
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">

                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus)</div>
                        </div>
                        <div class="form-group col-md-12">

                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">DRAFTED DOCUMENT</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>

                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.EmailSentYN)</div>
                        </div>
                        <div class="form-group col-md-12">

                            @if (Model.EmailSentYN == null)
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                            else if (Model.EmailSentYN == true)
                            {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="lblStatusDisplay">🔒</div>
                                }
                                else
                                {
                                    <div class="lblStatusDisplay">🔓</div>
                                }
                            </div>
                        }
                        <div class="col-md-12">&nbsp;</div>
                    </div>
                </div>
            </div>
            </div>
        </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">
                        DeliveryChallan Details
                        @*<a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>*@
                        <a class="btn btn-openid pull-right" onclick="AddDeliveryChallanDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>

                    </div>

                    @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                    <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                        <table id="tblDeliveryChallanDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                            <thead>
                                <tr class="text-center TableHead">
                                    <th>Product</th>
                                    <th>Ord. Qty</th>
                                    <th>Prev.Deliv.Qty</th>
                                    <th>Curr.Deliv.Qty</th>
                                    <th>...</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                </div>
            </div>

            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Other Details</div>
                    <div class="form-group col-md-12">
                        <div class="col-md-4 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.VehiclePlateNo, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.VehiclePlateNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                                @Html.ValidationMessageFor(model => model.VehiclePlateNo, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-4 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.DriverName, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.DriverName, new { htmlAttributes = new { @class = "form-control newinput" } })
                                @Html.ValidationMessageFor(model => model.DriverName, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                </div>
            </div>

            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Notes</div>

                    <div class="form-group col-md-12">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                                @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </div>
                </div>
            </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Attachments</div>
                    @Html.Partial("_Fileupload")
                </div>
            </div>
            <div class="" hidden="hidden">
                <div class="col-md-offset-2 col-md-10">
                    <input id="btnInsertUpdateDeliveryChallan" type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
            }
            <script>
                $(document).ready(function () {
                    debugger;
                    try {
                        $.validator.unobtrusive.parse("#DeliveryChallanForm");
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('input.datepicker').datepicker({
                            format: "dd-M-yyyy",
                            maxViewMode: 0,
                            todayBtn: "linked",
                            clearBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        //Fileupload
                        $('#btnUpload').click(function () {
                            debugger;
                            //Pass the controller name
                            var FileObject = new Object;
                            if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                                FileObject.ParentID = (($('#DeliveryChallanForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#DeliveryChallanForm #ID').val()) : $('#hdnFileDupID').val());
                            }
                            else {
                                FileObject.ParentID = ($('#DeliveryChallanForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#DeliveryChallanForm #ID').val();
                            }


                            FileObject.ParentType = "DeliveryChallan";
                            FileObject.Controller = "FileUpload";
                            UploadFile(FileObject);
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                       // $('#DeliveryChallanGradeCode').select2({});
                        $('#SaleOrderID').val($('#hdnSaleOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnSaleOrderID').val());
                        $('#SaleOrderID').select2({
                            language: {
                                noResults: function (params) {
                                    return "Search result will shows here";
                                }
                            },
                            ajax: {
                                type: 'POST',
                                dataType: 'json',
                                url: "SaleOrder/GetSaleOrderSelectListOnDemand/",
                                delay: 250,
                                data: function (term) {
                                    return {
                                        'searchTerm': term.term //search term
                                    };
                                },
                                processResults: function (data) {
                                    return {
                                        results: data.items
                                    };
                                },
                            }
                        });
                        $('#ProdOrderID').val($('#hdnProdOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnProdOrderID').val());
                        $('#ProdOrderID').select2({
                            language: {
                                noResults: function (params) {
                                    return "Search result will shows here";
                                }
                            },
                            ajax: {
                                type: 'POST',
                                dataType: 'json',
                                url: "ProductionOrder/GetProductionOrderSelectListOnDemand/",
                                delay: 250,
                                data: function (term) {
                                    return {
                                        'searchTerm': term.term //search term
                                    };
                                },
                                processResults: function (data) {
                                    return {
                                        results: data.items
                                    };
                                },
                            }
                        });
                        $('.select2').addClass('form-control newinput');
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try   {
                        $('#DeliveryChallanForm #ProdOrderID').change(function () {
                            debugger;
                            OnServerCallBegin();
                            $("#divDeliveryChallanForm").load("DeliveryChallan/DeliveryChallanForm?id=" + _emptyGuid +"&prodOrderID="+this.value, function () {
                                $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#DeliveryChallanForm #hdnCustomerID').val());
                                BindDeliveryChallanDetailList("00000000-0000-0000-0000-000000000000", true,false);

                                OnServerCallComplete();
                            });

                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('#DeliveryChallanForm #SaleOrderID').change(function () {
                            debugger;
                            OnServerCallBegin();
                            $("#divDeliveryChallanForm").load("DeliveryChallan/DeliveryChallanForm?id=" + _emptyGuid + "&saleOrderID=" + this.value, function () {
                                $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#DeliveryChallanForm #hdnCustomerID').val());
                                BindDeliveryChallanDetailList("00000000-0000-0000-0000-000000000000", false,true);

                                OnServerCallComplete();
                            });

                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('[name="DocumentType"]').change(function () {
                            if (this.value == "SaleOrder") {
                                $('#divSaleOrderSelectList').show();
                                $('#divProductionOrderSelectList').hide();
                                $('#SaleOrderID').prop('disabled', false);
                                $('#ProdOrderID').prop('disabled', true);
                            }
                            else if (this.value == "ProductionOrder") {
                                $('#divSaleOrderSelectList').hide();
                                $('#divProductionOrderSelectList').show();
                                $('#SaleOrderID').prop('disabled', true);
                                $('#ProdOrderID').prop('disabled', false);
                            }
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                });
            </script>


