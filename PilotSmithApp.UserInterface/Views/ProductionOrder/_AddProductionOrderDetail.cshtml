@model PilotSmithApp.UserInterface.Models.ProductionOrderDetailViewModel

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormProductionOrderDetail" }))
{
    @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divProductSelectList">
                    @Html.Action("ProductSelectList", "Product", new { required = "required" })
                </div>
                @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
            </div>
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductModelID, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                <div class="divProductModelSelectList">
                    <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                    @*@Html.Action("ProductModelSelectList", "ProductModel", new { required = "required" })*@
                </div>
                @Html.HiddenFor(model => model.ProductModelID, htmlAttributes: new { @class = "", @id = "hdnProductModelID" })
            </div>
        </div>
        <div id="divProductBasicInfo">
            @Html.Action("ProductBasicInfo", "Product", new { ID = Guid.Empty })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductSpec, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ProductSpec, 4, 0, new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.ProductSpec, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    <div class="divUnitSelectList">
                        @Html.Action("UnitSelectList", "Unit", new { required = "" })
                    </div>
                    @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
                </div>
            </div>

            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ProducedQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ProducedQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.ProducedQty, "", new { @class = "text-danger" })
                </div>
            </div>*@

    </div>
    <div class="form-group col-md-12">
        <div class="col-md-4 no-padding">

            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    <div class="divUnitSelectList">
                        @Html.Action("UnitSelectList", "Unit", new { required = "" })
                    </div>
                    @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
                </div>
            </div>

            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ProducedQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ProducedQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.ProducedQty, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.PlantCode, new { htmlAttributes = new { @class = "form-control newinput" } })
                    @Html.ValidationMessageFor(model => model.PlantCode, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-12">&nbsp;</div>
        </div>
        <div class="col-md-8 no-padding rcorners2" >
            
            <div class="col-md-12">&nbsp;</div>
            @*<div class="col-md-12 no-padding" style="border-left:1px solid #c2dee0;">*@
                <div class="col-md-12 no-padding " style="font-size:14px;margin-left:270px;">                   
                    @Html.Label("Milestone")
                    <div class="col-md-12">&nbsp;</div>
                </div>

                <table style="margin-left:10px;">
                    <tr>
                        <th></th>
                        <th style="text-align:center">
                            ForeCast
                            <div class="col-md-12">&nbsp;</div>
                        </th>
                        <th style="text-align:center">
                            Actual
                            <div class="col-md-12">&nbsp;</div>
                        </th>
                    </tr>
                    <tr >
                        <td>
                            MileStone 1
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone1FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone1FcFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone1AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone1AcTFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>

                    </tr>
                    <tr >
                        <td>
                            MileStone 2
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone2FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone2FcFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone2AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone2AcTFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                    </tr>
                    <tr >
                        <td>
                            MileStone 3
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone3FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone3FcFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone3AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone3AcTFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                    </tr>
                    <tr >
                        <td>
                            MileStone 4
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone4FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone4FcFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                        <td>
                            <div class="col-md-10 no-padding">
                                <div class="col-md-12">
                                    @Html.EditorFor(model => model.MileStone4AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                    @Html.ValidationMessageFor(model => model.MileStone4AcTFinishDtFormatted, "", new { @class = "text-danger" })
                                </div>
                            </div>
                            <div class="col-md-12">&nbsp;</div>
                        </td>
                    </tr>
                </table>
            </div>
        </div>
    @*</div>*@
    <div class="modal-footer d-flex justify-content-center">
        <button class="btn btn-default" id="btnAddProductionOrderDetail" onclick="AddProductionOrderDetailList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
    </div>
}
<script>
    $(document).ready(function () {
        $.validator.unobtrusive.parse("#FormProductionOrderDetail");
        $('#divModelPopProductionOrder #ProductID,#divModelPopProductionOrder #UnitCode').select2({
            dropdownParent: $("#divModelPopProductionOrder")
        });

        $('.select2').addClass('form-control newinput');
        $('#divModelPopProductionOrder #ProductID').change(function () {
            if ($('#divProductBasicInfo') != undefined) {
                $('#divModelPopProductionOrder #divProductBasicInfo').load("Product/ProductBasicInfo?ID=" + (this.value == "" ? '00000000-0000-0000-0000-000000000000' : this.value), function () {
                    $('#divModelPopProductionOrder #ProductSpec').val($('#divModelPopProductionOrder #spnProductName').text());
                });
            }
            if ($('.divProductModelSelectList') != undefined) {
                $('#dropLoad').addClass('fa fa-spinner fa-spin');
                if (this.value != "") {
                    $('.divProductModelSelectList').load("ProductModel/ProductModelSelectList?required=required&productID=" + this.value)
                }
                else {
                    $('.divProductModelSelectList').empty();
                    $('.divProductModelSelectList').append('<span class="form-control newinput"><i id="dropLoad" class="fa fa-spinner"></i></span>');
                }
            }
        });
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

<style>
    .rcorners2 {
    border-radius: 25px;
    border: 1px solid #068a78;
    padding: 20px;
    width: 550px;
    height: 295px;
}
</style>


