@model PilotSmithApp.UserInterface.Models.EstimateDetailViewModel
@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormEstimateDetail" }))
{
    @Html.HiddenFor(model => model.EstimateID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
           @if (Model.IsUpdate)
             {
              <div class="col-md-12">
                 <span class="form-control newinput" id="spanProductName" style="background-color:#eeeeee"></span>
              </div> 
              }
           else
              {

            <div class="col-md-12">
                <div class="divProductSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("ProductSelectList", "Product", new { required = "required" })*@
                </div>              
            </div>
              }
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductRequired", "required")
            @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
        </div>
       
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductModelID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
           @if (Model.IsUpdate)
            {
                 <div class="col-md-12">
                   <span class="form-control newinput" id="spanProductModelName" style="background-color:#eeeeee"></span>
                 </div>
              }
            else
            {
            <div class="col-md-12">
                <div class="divProductModelSelectList">
                    <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                    @*@Html.Action("ProductModelSelectList", "ProductModel", new { required = "" })*@
                </div>              
            </div>
             }
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductModelRequired", "required")
            @Html.HiddenFor(model => model.ProductModelID, htmlAttributes: new { @class = "", @id = "hdnProductModelID" })
        </div>      
        <div id="divProductBasicInfo">
            @Html.Action("ProductBasicInfo", "Product", new { ID = Guid.Empty })
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductSpec, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ProductSpec, 4, 0, new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.ProductSpec, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control newinput Amount", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    <div class="divUnitSelectList">
                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                        @*@Html.Action("UnitSelectList", "Unit", new { required = "required" })*@
                    </div>                  
                </div>
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnUnitRequired", "required")
                <!-- This hidden field will keep the information whether the field is disabled or not -->
                @Html.Hidden("hdnUnitdisabled", false)
                @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
            </div>
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @*<span class="control-label lblrequired">CostRate(<span class="control-label lblrequired" id="detailCurCostRate">INR</span>)</span>*@ 
                    @Html.LabelFor(model => model.CostRate, htmlAttributes: new { @class = "control-label " })  (<span class="control-label" id="detailCurCostRate"> INR </span>)
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.CostRate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.CostRate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @*<span class="control-label lblrequired">SellingRate(<span class="control-label lblrequired" id="detailCurSellingRate">INR</span>)</span>*@ 
                    @Html.LabelFor(model => model.SellingRate, htmlAttributes: new { @class = "control-label " })  (<span class="control-label" id="detailCurSellingRate"> INR </span>)
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.SellingRate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.SellingRate, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.DrawingNo, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.DrawingNo, new { htmlAttributes = new { @class = "form-control newinput " } })
                    @Html.ValidationMessageFor(model => model.DrawingNo, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

    </div>
        <div class="modal-footer d-flex justify-content-center">
            <button class="btn btn-default" id="btnAddEstimateDetail" onclick="AddEstimateDetailToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
        </div>
}

<script>
    $(document).ready(function () {
        try {
     @if (Model.IsUpdate)
     {

     }
     else
     { 
         <text>
          $('.divProductSelectList').load('/Product/ProductSelectList?required=' + $('#hdnProductRequired').val())
         </text>
     }
            $('.divUnitSelectList').load('/Unit/UnitSelectList?required=' + $('#hdnUnitRequired').val())
        }
        catch (e) {
            console.log(e.message);
        }
        $.validator.unobtrusive.parse("#FormEstimateDetail");
        $('#divModelPopEstimate #ProductID,#divModelPopEstimate #UnitCode').select2({
            dropdownParent: $("#divModelPopEstimate")
        });
        $('.select2').addClass('form-control newinput');

        //For currency
        $('#detailCurCostRate').text($('#hdnCurrencyCode').val())
        $('#detailCurSellingRate').text($('#hdnCurrencyCode').val())

        //$('#ProductID').change(function () {
        //    if ($('#divProductBasicInfo') != undefined) {
        //        debugger;
        //        $('#divProductBasicInfo').load("Product/ProductBasicInfo?ID=" + (this.value == "" ? '00000000-0000-0000-0000-000000000000' : this.value), function () {
        //            $('#ProductSpec').val($('#spnProductName').text());
        //        });
        //    }
        //    if ($('.divProductModelSelectList') != undefined) {
        //        debugger;
        //        $('#dropLoad').addClass('fa fa-spinner fa-spin');
        //        if (this.value != "") {
        //            $('.divProductModelSelectList').load("ProductModel/ProductModelSelectList?required=required&productID=" + this.value)

        //        }
        //        else {
        //            $('.divProductModelSelectList').empty();
        //            $('.divProductModelSelectList').append('<span class="form-control newinput"><i id="dropLoad" class="fa fa-spinner"></i></span>');
        //        }
        //    }

        //});

    });
</script>