@model PilotSmithApp.UserInterface.Models.ProductionQCViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateProductionQC", "ProductionQC", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProductionQC", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "ProductionQCForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                <div class="col-md-12 no-padding" id="divProductionOrderSelectList">
                    <div class="col-md-12">
                        @Html.Label("Search and select a Production Order", htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.ProdOrderID, Model.ProdOrderSelectList, "Search Production Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnProdOrderID').val(this.value)" })
                    </div>
                    @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdQCNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdQCNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.ProdQCNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdQCDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdQCDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ProdQCDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdQCRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdQCRefNo, new { htmlAttributes = new { @class = "form-control newinput"} })
                        @Html.ValidationMessageFor(model => model.ProdQCRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPlantSelectList">
                            @Html.Action("PlantSelectList", "Plant", new { required = "" })
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPlantRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnPlantdisabled", false)
                    @Html.HiddenFor(model => model.PlantCode, htmlAttributes: new { @class = "", @id = "hdnPlantCode" })
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblRequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divCustomerSelectList">
                            @Html.Action("CustomerSelectList", "Customer", new { required = "" })
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divBranchSelectList">
                            @Html.Action("BranchSelectList", "Branch", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentStatusSelectList">
                            @Html.Action("DocumentStatusSelectList", "DocumentStatus", new { required = "required", code = "ENQ" })
                        </div>
                        @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                    </div>
                </div>
            </div>
            @if (Model.IsUpdate)
            {
                <div class="col-md-6 clearfix divsummerybox" style="min-height:200px;margin-top:-4.6%">
                    <div class="col-md-2 no-padding">

                    </div>
                    <div class="col-md-10 no-padding" style="background-color:transparent;min-height:350px;background-image:url(/Content/images/frame.png);background-repeat:no-repeat;background-size:63%">
                        <ul class="todo-list ui-sortable" style="margin-top:25%;width:59%;">
                            <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                <span class="control-label pull-left" style="text-decoration:underline">@Html.DisplayNameFor(Model => Model.EmailSentYN):</span><br />
                                <!-- todo text -->
                                <div class="col-md-12"></div>
                                @if (Model.EmailSentYN == null)
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">EMAIL NOT SEND</span>
                                }
                                else if (Model.EmailSentYN == true)
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">✔ EMAIL SEND</span>
                                }
                                else
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">EMAIL NOT SEND</span>
                                }
                            </li>

                            <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                <span class="control-label pull-left" style="text-decoration:underline">@Html.DisplayNameFor(Model => Model.IsFinalApproved):</span><br />
                                <!-- todo text -->
                                <div class="col-md-12"></div>
                                @if (Model.IsFinalApproved == null)
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">PENDING FOR FINAL APPROVAL</span>
                                }
                                else if (Model.IsFinalApproved == true)
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">✔ FINALY APPROVED</span>
                                }
                                else
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">✗ FINAL APPROVER REJECTED</span>
                                }

                            </li>
                            <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                <span class="control-label pull-left" style="text-decoration:underline;">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus):</span><br />
                                <!-- todo text -->
                                <div class="col-md-12"></div>
                                @if (Model.LatestApprovalStatus == null)
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">DRAFTED DOCUMENT</span>
                                }
                                else
                                {
                                    <span class="control-label pull-left infospan" style="margin-left:9%!important">@Model.LatestApprovalStatusDescription</span>
                                }
                            </li>
                        </ul>
                    </div>
                </div>
            }
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>
        <div class="col-md-11 divbox1">
            <div class="col-md-12 divbox2">
                <div class="col-md-12 headSeperator">Quality Control Details<a class="btn btn-openid pull-right" onclick="AddProductionQCDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a></div>

                @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                    <table id="tblProductionQCDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                        <thead>
                            <tr class="text-center TableHead">
                                <th style="width:35%">Product</th>
                                <th style="width:10%">Prod.Ord.Qty</th>
                                <th style="width:10%">Prev.QC.Qty</th>
                                <th style="width:15%">Curr.QC.Qty</th>
                                <th style="width:15%">QC Date</th>
                                <th style="width:10%">QC By</th>
                                <th style="width:5%">...</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
        </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Notes</div>
                    <div class="form-group col-md-12">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                                @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </div>
                </div>
            </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Attachments</div>
                    @Html.Partial("_Fileupload")
                </div>
            </div>
            <div class="" hidden="hidden">
                <div class="col-md-offset-2 col-md-10">
                    <input id="btnInsertUpdateProductionQC" type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
}
<script>
                $(document).ready(function () {
                    try {
                        $.validator.unobtrusive.parse("#ProductionQCForm");
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('input.datepicker').datepicker({
                            format: "dd-M-yyyy",
                            maxViewMode: 0,
                            todayBtn: "linked",
                            clearBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        //Fileupload
                        $('#btnUpload').click(function () {
                            debugger;
                            //Pass the controller name
                            var FileObject = new Object;
                            if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                                FileObject.ParentID = (($('#ProductionQCForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ProductionQCForm #ID').val()) : $('#hdnFileDupID').val());
                            }
                            else {
                                FileObject.ParentID = ($('#ProductionQCForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ProductionQCForm #ID').val();
                            }


                            FileObject.ParentType = "ProductionQC";
                            FileObject.Controller = "FileUpload";
                            UploadFile(FileObject);
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('#ProdOrderID').val($('#hdnProdOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnProdOrderID').val());
                        $('#ProdOrderID').select2({
                            language: {
                                noResults: function (params) {
                                    return "Search result will shows here";
                                }
                            },
                            ajax: {
                                type: 'POST',
                                dataType: 'json',
                                url: "ProductionOrder/GetProductionOrderSelectListOnDemand/",
                                delay: 250,
                                data: function (term) {
                                    return {
                                        'searchTerm': term.term //search term
                                    };
                                },
                                processResults: function (data) {
                                    return {
                                        results: data.items
                                    };
                                },
                            }
                        });
                        $('.select2').addClass('form-control newinput');
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                });
</script>

