@model PilotSmithApp.UserInterface.Models.QuotationOtherChargeViewModel
@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormOtherExpenseDetail" }))
{
    @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.OtherChargeCode, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divOtherChargeSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("OtherChargeSelectList", "OtherCharge", new { required = "required" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnOtherChargeRequired", "required")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnOtherChargedisabled", false)
            @Html.HiddenFor(model => model.OtherChargeCode, htmlAttributes: new { @id = "hdnOtherChargeCode" })
            
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @*<span class="control-label lblrequired">Amount (<span class="control-label lblrequired" id="otherchargeCurAmount">INR</span>)</span>*@ 
                @Html.LabelFor(model => model.ChargeAmount, htmlAttributes: new { @class = "control-label lblrequired" })  (<span class="control-label lblrequired" id="otherchargeCurAmount"> INR </span>)
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.ChargeAmount, new { htmlAttributes = new { @class = "form-control ApplyCurrency  newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.ChargeAmount, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.TaxTypeCode, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                <div class="divTaxTypeSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("TaxTypeSelectList", "TaxType", new { required = "" })*@
                </div>               
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnTaxTypeRequired", "")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnTaxTypedisabled", false)
            @Html.HiddenFor(model => model.TaxTypeCode, htmlAttributes: new { @class = "CalculateGST", @id = "hdnTaxTypeCode" })            
        </div>
        <div class="col-md-12 no-padding" id="divGSTCalculatedFields">
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.SGSTPerc, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.HiddenFor(model => model.SGSTPerc, htmlAttributes: new { @id = "hdnSGSTPerc" })
                    @Html.EditorFor(model => model.SGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                    @Html.ValidationMessageFor(model => model.SGSTPerc, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.CGSTPerc, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.HiddenFor(model => model.CGSTPerc, htmlAttributes: new { @id = "hdnCGSTPerc" })
                    @Html.EditorFor(model => model.CGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                    @Html.ValidationMessageFor(model => model.CGSTPerc, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.IGSTPerc, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.HiddenFor(model => model.IGSTPerc, htmlAttributes: new { @id = "hdnIGSTPerc" })
                    @Html.EditorFor(model => model.IGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                    @Html.ValidationMessageFor(model => model.IGSTPerc, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
    </div>
    <div class="modal-footer d-flex justify-content-center">
        <button class="btn btn-default" id="btnAddOtherExpenseDetail" onclick="AddOtherExpenseDetailToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
    </div>
}
<script>
    $(document).ready(function () {
        $.validator.unobtrusive.parse("#FormOtherExpenseDetail");
        try {          
            $('.divTaxTypeSelectList').load('/TaxType/TaxTypeSelectList?required=' + $('#hdnTaxTypeRequired').val(), function () {
                $('#divModelPopQuotation .CalculateGST').change(function () {
                    debugger;
                    var ChargeAmount = parseFloat($('#divModelPopQuotation #ChargeAmount').val() != "" ? $('#divModelPopQuotation #ChargeAmount').val() : 0);
                    var CGST = parseFloat($('#divModelPopQuotation #TaxTypeCode').val() != "" ? $('#divModelPopQuotation #TaxTypeCode').val().split('|')[1].split(',')[0].split('-')[1] : 0);
                    var SGST = parseFloat($('#divModelPopQuotation #TaxTypeCode').val() != "" ? $('#divModelPopQuotation #TaxTypeCode').val().split('|')[1].split(',')[1].split('-')[1] : 0);
                    var IGST = parseFloat($('#divModelPopQuotation #TaxTypeCode').val() != "" ? $('#divModelPopQuotation #TaxTypeCode').val().split('|')[1].split(',')[2].split('-')[1] : 0);
                    $('#divModelPopQuotation #hdnCGSTPerc').val(CGST);
                    $('#divModelPopQuotation #hdnSGSTPerc').val(SGST);
                    $('#divModelPopQuotation #hdnIGSTPerc').val(IGST);
                    $('#divModelPopQuotation #CGSTPerc').val(ChargeAmount * CGST / 100);
                    $('#divModelPopQuotation #SGSTPerc').val(ChargeAmount * SGST / 100);
                    $('#divModelPopQuotation #IGSTPerc').val(ChargeAmount * IGST / 100);
                });
            });
            $('.divOtherChargeSelectList').load('/OtherCharge/OtherChargeSelectList?required=' + $('#hdnOtherChargeRequired').val(), function () {
                $('.divOtherChargeSelectList #OtherChargeCode').change(function () {
                    debugger;
                    var otherCharge;
                    otherCharge = GetOtherCharge(this.value);
                    $('#hdnOtherChargeSACCode').val(otherCharge.SACCode);
                });
                
            });
        }
        catch (e) {
            console.log(e.message);
        }
        $('#divModelPopQuotation #TaxTypeCode').select2({
            dropdownParent: $("#divModelPopQuotation")
        });
        $('.select2').addClass('form-control newinput');
        
        //For currency
        $('#otherchargeCurAmount').text($('#hdnCurrencyCode').val())
    });
</script>
