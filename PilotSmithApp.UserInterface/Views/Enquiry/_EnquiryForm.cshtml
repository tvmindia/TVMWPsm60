@model PilotSmithApp.UserInterface.Models.EnquiryViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateEnquiry", "Enquiry", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessEnquiry", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "EnquiryForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                <!--Currency start-->               
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12" style="display:inline-flex">
                            @Html.HiddenFor(model => model.CurrencyCode, htmlAttributes: new { @class = "", @id = "hdnCurrencyCode" })
                            @Html.HiddenFor(model => model.CurrencyRate, htmlAttributes: new { @class = "", @id = "hdnCurrencyRate" })
                            @Html.Label("Select currency", htmlAttributes: new { @class = "control-label lblrequired" })
                            <label class="control-label lblrequired lblrate">Rate</label>
                        </div>                      
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12" style="display:inline-flex;font-weight:500;">
                                @*<select class="form-control newinput" disabled>
                            <option>INR</option>
                        </select>
                        <input class="form-control newinput" type="number" value="1" readonly style="width:100%;border-left:1px solid black;text-align:right;" />*@
                                @if (Model.IsUpdate)
                                {
                                    <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                        <option>@Model.CurrencyCode</option>
                                    </select>
                                    <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;border-bottom:none;text-align:right;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span>@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                    <input class="form-control newinput" type="number" value="@Model.CurrencyRate" readonly style="width:100%;text-align:left;min-width:70px;" title="Cannot change rate" />
                                }
                                else
                                {
                                    <select class="form-control newinput changeCurrency" style="width:100%;min-width:68px;">
                                        @{
                                            foreach (var cur in Model.Currency.CurrencyList)
                                            {
                                                <option value="@cur.Code" title="@cur.Description">@cur.Code</option>
                                            }
                                        }

                                    </select>
                                    <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;text-align:right;border-bottom:none;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span id="lblCurrencyCode">@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                    <input class="form-control newinput changeCurrency" type="number" min="0" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" value="@Model.CurrencyRate"/>

                                            }
                                @*<select class="form-control newinput" disabled>
                                    <option>INR</option>
                                </select>*@
                                <input class="form-control newinput" type="text" readonly style="width:100%;text-align:left;background-color:rgba(2, 166, 143, 0.06);border-bottom:none;min-width:45px;" value="INR"/>
                            </div>
                        </div>
                    </div>
                    @if (!Model.IsUpdate)
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info currencyNote" style="background-color: #e8b67f!important; border-left: 8px solid #e66911;color: #543131 !important;padding: 5px 0px 6.5px 10px; margin: 0px;">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Changing currency will reset document</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info currencyNote" style="background-color: #e8b67f!important; border-left: 8px solid #e66911;color: #543131 !important;padding: 5px 0px 6.5px 10px; margin: 0px;">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Currency cannot change in edit mode</p>
                                </div>
                            </div>
                        </div>
                    }
                    </div>
                    <!--Currency end-->

                    <div class="col-md-12 no-padding">
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.EnquiryNo, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.EnquiryNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                                @Html.ValidationMessageFor(model => model.EnquiryNo, "", new { @class = "text-danger" })
                            </div>

                        </div>
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.EnquiryDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.EnquiryDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.EnquiryDateFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="col-md-12 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12">
                                <span class="form-control newinput" style="background-color:#eeeeee">@Model.Customer.CompanyName</span>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <div class="divCustomerSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                </div>
                            </div>
                        }
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnCustomerRequired", "required")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnCustomerdisabled", false)
                        @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                    </div>
                    <div id="divCustomerBasicInfo">
                        @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                    </div>
                    <div class="col-md-12 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.RequirementSpec, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.TextAreaFor(model => model.RequirementSpec, 5, 0, new { @class = "form-control newinput" })
                            @Html.ValidationMessageFor(model => model.RequirementSpec, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-12 no-padding">
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.EnquiryGradeCode, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12" id="divEnquiryGradeSelectList">
                                @Html.DropDownListFor(model => model.EnquiryGradeCode, Model.EnquiryGrade.EnquiryGradeSelectList, "--Select grade--", new { @class = "form-control newinput", @onchange = "$('#hdnGradeCode').val(this.value)", @style = "Width:100%;" })
                                @Html.HiddenFor(model => model.EnquiryGradeCode, htmlAttributes: new { @class = "", @id = "hdnGradeCode" })
                            </div>
                        </div>
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                <div class="divDocumentStatusSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                    @*@Html.Action("DocumentStatusSelectList", "DocumentStatus", new { required = "required", code = "ENQ" })*@
                                </div>
                            </div>
                            <!-- This hidden field will keep the information whether the field is required or not -->
                            @Html.Hidden("hdnDocumentStatusRequired", "required")
                            @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                        </div>
                    </div>
                    <div class="col-md-12 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReferredByCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divReferredByCodeSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnReferredByRequired", "")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnReferredBydisabled", false)
                        @Html.HiddenFor(model => model.ReferredByCode, htmlAttributes: new { @class = "", @id = "hdnReferredByCode" })
                    </div>
                    <div class="col-md-12 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ResponsiblePersonID, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divResponsiblePersonSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                @*@Html.Action("ResponsiblePersonSelectList", "Employee", new { required = "" })*@
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnResponsiblePersonRequired", "")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnResponsiblePersondisabled", false)
                        @Html.HiddenFor(model => model.ResponsiblePersonID, htmlAttributes: new { @class = "", @id = "hdnResponsiblePersonID" })
                    </div>
                    <div class="col-md-12 no-padding">
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            @if (Model.IsUpdate)
                            {
                                <div class="col-md-12">
                                    <span class="form-control newinput" style="background-color:#eeeeee">@Model.Branch.Description</span>
                                </div>
                            }
                            else
                            {
                                <div class="col-md-12">
                                    <div class="divBranchSelectList">
                                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                        @*@Html.Action("BranchSelectList", "Branch", new { required = "required" })*@
                                    </div>
                                </div>
                            }
                            <!-- This hidden field will keep the information whether the field is required or not -->
                            @Html.Hidden("hdnBranchRequired", "required")
                            <!-- This hidden field will keep the information whether the field is disabled or not -->
                            @Html.Hidden("hdnBranchdisabled", false)
                            @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })

                        </div>
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.AttendedByID, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                <div class="divAttendedBySelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                    @*@Html.Action("AttendedBySelectList", "Employee", new { required = "" })*@
                                </div>
                            </div>
                            <!-- This hidden field will keep the information whether the field is required or not -->
                            @Html.Hidden("hdnAttendedByRequired", "")
                            <!-- This hidden field will keep the information whether the field is disabled or not -->
                            @Html.Hidden("hdnAttendedBydisabled", false)
                            @Html.HiddenFor(model => model.AttendedByID, htmlAttributes: new { @class = "", @id = "hdnAttendedByID" })
                        </div>
                    </div>
                </div>
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Document Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.EnquiryNo" documentType="ENQ" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>

            @if (Model.IsUpdate)
            {
                <div class="form-group col-md-6 no-right-padding" id="divFollowupList">
                    @Html.Action("GetEnquiryFollowupList", "EnquiryFollowup", new { EnquiryID = Model.ID })
                </div>
            }

            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            @{
                if (Model.IsDocLocked || !Model.IsUpdate)
                {
                    <div class="col-md-12 headSeperator">Enquiry Details<a class="btn btn-openid pull-right" onclick="AddEnquiryDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a></div>
                }
                else
                {
                    <div class="col-md-12 headSeperator">Enquiry Details<a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a></div>
                }
            }
            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblEnquiryDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:15%">Product</th>
                            <th style="width:10%">HSN Code</th>
                            <th style="width:10%">Quantity</th>
                            <th style="width:10%">Rate(<span id="spanRate">@Model.CurrencyCode</span>)</th>
                            <th style="width:10%">Total(<span id="spanTotal">@Model.CurrencyCode</span>)</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator"> Notes</div>
            <div class="form-group col-md-12">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator"> Attachments</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateEnquiry" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
                }
<script>
    $(document).ready(function () {

        try {
            $('.divAttendedBySelectList').load('/Employee/AttendedBySelectList?required=' + $('#hdnAttendedByRequired').val())
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=ENQ&required=' + $('#hdnDocumentStatusRequired').val())
            $('.divReferredByCodeSelectList').load('/ReferencePerson/ReferencePersonSelectList?required=' + $('#hdnReferredByRequired').val())
            $('.divResponsiblePersonSelectList').load('/Employee/ResponsiblePersonSelectList?required=' + $('#hdnResponsiblePersonRequired').val())
            @if (Model.IsUpdate)
            {

            }
            else
            {
                <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });

            $(".changeCurrency").change(function () {
                debugger;
                if (_dataTable.EnquiryDetailList.rows().count() > 0) {
                    debugger;
                    notyConfirm('Do you want to continue?', 'ClearEnquiryform();', 'This will reset the form !', "Continue");
                    return false;
                    }              
                    if (this.nodeName == "SELECT") {
                        $('#hdnCurrencyCode').val(this.value)
                        $('#spanRate').text(this.value)
                        $('#spanTotal').text(this.value)
                        $('#lblCurrencyCode').text(this.value)
                        $('#idCurRateForAutofocus').focus();
                        $('#idCurRateForAutofocus').val(1);
                        $('#hdnCurrencyRate').val(1);
                    }
                    if (this.nodeName == "INPUT") {
                        $('#hdnCurrencyRate').val(this.value)
                    }

            });         
            </text>
            }
            if ($('#EnquiryForm #IsDocLocked').val() == "False" && $('#EnquiryForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }


        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $.validator.unobtrusive.parse("#EnquiryForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#EnquiryForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#EnquiryForm #ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#EnquiryForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#EnquiryForm #ID').val();
                }


                FileObject.ParentType = "Enquiry";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#EnquiryGradeCode').select2({
                dropdownParent: $("#divEnquiryGradeSelectList")
            });
            $('.select2').addClass('form-control newinput');


            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>
