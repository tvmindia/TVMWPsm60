@model PilotSmithApp.UserInterface.Models.CustomerViewModel
<style>
    #divModelMasterPopUp .modal-dialog {
    width: 55% !important;
}
    </style>
@using (Ajax.BeginForm("InsertUpdateCustomerMaster", "Customer", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessCustomerMaster", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormCustomerMaster" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CompanyName, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.CompanyName, new { htmlAttributes = new { @class = "form-control newinput", @autofocus = true } })
                @Html.ValidationMessageFor(model => model.CompanyName, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CustomerCategoryList, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.ListBoxFor(model => model.CustomerCategoryList, Model.CustomerCategory.CustomerCategorySelectList, new { @class = "form-control newinput", @style = "padding:4px 12px;width:100%;" })
                @Html.ValidationMessageFor(model => model.CustomerCategoryList, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CountryCode, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                <div class="divCountrySelectList">
                    <span class="form-control"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("CountrySelectList", "Country", new { required = "" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnCountryRequired", "")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnCountrydisabled", false)
            @Html.HiddenFor(model => model.CountryCode, htmlAttributes: new { @class = "", @id = "hdnCountryCode" })
        </div>
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.StateCode, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                <div class="divStateSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("StateSelectList", "State", new { required = "" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnStateRequired", "")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnStatedisabled", false)
            @Html.HiddenFor(model => model.StateCode, htmlAttributes: new { @class = "", @id = "hdnStateCode" })
        </div>
    </div>
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.DistrictCode, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divDistrictSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("DistrictSelectList", "District", new { required = "" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnDistrictRequired", "required")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnDistrictdisabled", false)
            @Html.HiddenFor(model => model.DistrictCode, htmlAttributes: new { @class = "", @id = "hdnDistrictCode" })
        </div>

        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.AreaCode, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divAreaSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("AreaSelectList", "Area", new { required = "" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnAreaRequired", "required")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnAreadisabled", false)
            @Html.HiddenFor(model => model.AreaCode, htmlAttributes: new { @class = "", @id = "hdnAreaCode" })
        </div>
        
    </div>
        <div class="form-group col-md-12 no-padding">
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ContactTitle, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.ContactTitle, Model.Titles.TitlesSelectList, "-- select title --", new { @class = "form-control newinput", value = -1, style = "padding:4px 12px;width:100%;" })
                    @Html.ValidationMessageFor(model => model.ContactTitle, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-8 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ContactPerson, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ContactPerson, new { htmlAttributes = new { @class = "form-control newinput" } })
                    @Html.ValidationMessageFor(model => model.ContactPerson, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>
                <div class="form-group col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Mobile, htmlAttributes: new { @class = "control-label " })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Mobile, new { htmlAttributes = new { @class = "form-control newinput" } })
                            @Html.ValidationMessageFor(model => model.Mobile, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ContactEmail, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ContactEmail, new { htmlAttributes = new { @class = "form-control newinput", } })
                            @Html.ValidationMessageFor(model => model.ContactEmail, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
                    <div class="form-group col-md-12 no-padding">
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.BillingAddress, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.BillingAddress, 5, 60, new { @class = "form-control BlockEnter newinput" })
                                @Html.ValidationMessageFor(model => model.BillingAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ShippingAddressCus, htmlAttributes: new { @class = "control-label" })
                            </div>

                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.ShippingAddressCus, 5, 60, new { @class = "form-control BlockEnter newinput" })
                                @Html.ValidationMessageFor(model => model.ShippingAddressCus, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="modal-footer d-flex justify-content-center">
                        <button class="btn btn-default" type="submit" id="btnSaveMaster" style="margin-right:3%;margin-top:2%">Save Changes <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
                    </div>
}
<script>
    $(document).ready(function () {
        _parentFormID = "FormCustomerMaster";
        $.validator.unobtrusive.parse("#FormCustomerMaster");
        $('.divCountrySelectList').load('/Country/CountrySelectList?required=' + $('#hdnCountryRequired').val(), function () {
        });
        $('.divStateSelectList').load('/State/StateSelectList?required=' + $('#hdnStateRequired').val(), function () {
            $('#StateCode').change(function () {
                if (this.value !== "")
                    StateCodeOnChange();
            });
        });
        $('.divDistrictSelectList').load('/District/DistrictSelectList?required=' + $('#hdnDistrictRequired').val(), function () {
            $('#DistrictCode').change(function () {
                if (this.value !== "")
                    DistrictCodeOnChange();
            });
        });
        $('.divAreaSelectList').load('/Area/AreaSelectList?required=' + $('#hdnAreaRequired').val(), function () {
            $('#AreaCode').change(function () {
                if (this.value !== "")
                    AreaCodeOnChange();
            });
        });

        $('#ContactTitle,#CustomerCategoryList,#CountryCode,#StateCode,#DistrictCode').select2({});
        $('.select2').addClass('form-control newinput');
    });
    function StateCodeOnChange() {
        try {
            debugger;
            var StateViewModel = GetState($('#StateCode').val());
            $('#hdnStateCode').val($('#StateCode').val());
            $('#hdnCountryCode').val($('#CountryCode').val());
            if ($('#CountryCode').val() === "" && StateViewModel.CountryCode !== null) {
                $('#hdnCountryCode').val(StateViewModel.CountryCode);
                $('#CountryCode').val(StateViewModel.CountryCode).trigger('change');
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function GetState(code) {
        try {
            debugger;
            var data = { "code": code };
            var stateVM = [];
            _jsonData = GetDataFromServer("State/GetState/", data);
            if (_jsonData != '') {
                _jsonData = JSON.parse(_jsonData);
                _message = _jsonData.Message;
                _status = _jsonData.Status;
                stateVM = _jsonData.Record;
            }
            if (_status == "OK") {
                return stateVM;
            }
            if (_status == "ERROR") {
                notyAlert('error', _message);
            }

        }
        catch (e) {
            console.log(e.message);
        }
    }

    function DistrictCodeOnChange() {
        try {
            debugger;
            var DistrictViewModel = GetDistrict($('#DistrictCode').val());
            $('#hdnDistrictCode').val($('#DistrictCode').val());
            $('#hdnStateCode').val($('#StateCode').val());
            $('#hdnCountryCode').val($('#CountryCode').val());
            if ($('#CountryCode').val() === "" && DistrictViewModel.CountryCode !== null) {
                $('#hdnCountryCode').val(DistrictViewModel.CountryCode);
                $('#hdnStateCode').val($('#hdnStateCode').val() !== "" ? $('#hdnStateCode').val() : DistrictViewModel.StateCode);
                $('#hdnDistrictCode').val($('#hdnDistrictCode').val() !== "" ? $('#hdnDistrictCode').val() : DistrictViewModel.DistrictCode);
                $('#CountryCode').val(DistrictViewModel.CountryCode).trigger('change');
            }
            if ($('#StateCode').val() === "" && DistrictViewModel.StateCode !== null) {
                $('#hdnStateCode').val(DistrictViewModel.StateCode);
                $('#hdnDistrictCode').val($('#hdnDistrictCode').val() !== "" ? $('#hdnDistrictCode').val() : DistrictViewModel.DistrictCode);
                $('#StateCode').val(DistrictViewModel.StateCode).trigger('change');
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function GetDistrict(code) {
        try {
            debugger;
            var data = { "code": code };
            var districtVM = [];
            _jsonData = GetDataFromServer("District/GetDistrict/", data);
            if (_jsonData != '') {
                _jsonData = JSON.parse(_jsonData);
                _message = _jsonData.Message;
                _status = _jsonData.Status;
                districtVM = _jsonData.Record;
            }
            if (_status == "OK") {
                return districtVM;
            }
            if (_status == "ERROR") {
                notyAlert('error', _message);
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function AreaCodeOnChange() {
        try {
            debugger;
            var AreaViewModel = GetArea($('#AreaCode').val());
            $('#hdnAreaCode').val($('#AreaCode').val());
            $('#hdnDistrictCode').val($('#DistrictCode').val());
            $('#hdnStateCode').val($('#StateCode').val());
            $('#hdnCountryCode').val($('#CountryCode').val());

            if ($('#CountryCode').val() === "" && AreaViewModel.CountryCode !== null) {
                $('#hdnCountryCode').val(AreaViewModel.CountryCode);
                $('#hdnStateCode').val($('#hdnStateCode').val() !== "" ? $('#hdnStateCode').val() : AreaViewModel.StateCode);
                $('#hdnDistrictCode').val($('#hdnDistrictCode').val() !== "" ? $('#hdnDistrictCode').val() : AreaViewModel.DistrictCode);
                $('#CountryCode').val(AreaViewModel.CountryCode).trigger('change');
            }
            if ($('#StateCode').val() === "" && AreaViewModel.StateCode !== null) {
                debugger;
                $('#hdnStateCode').val(AreaViewModel.StateCode);
                $('#hdnDistrictCode').val($('#hdnDistrictCode').val() !== "" ? $('#hdnDistrictCode').val() : AreaViewModel.DistrictCode);
                $('#StateCode').val(AreaViewModel.StateCode).trigger('change');
            }
            if ($('#DistrictCode').val() === "" && AreaViewModel.DistrictCode !== null) {
                debugger;
                $('#hdnDistrictCode').val(AreaViewModel.DistrictCode);
                $('#DistrictCode').val(AreaViewModel.DistrictCode).trigger('change');
            }
        }
        catch (e) {
            console.log(e.message);
        }
    }

    function GetArea(code) {
        try {
            debugger;
            var data = { "code": code };
            var areaVM = [];
            _jsonData = GetDataFromServer("Area/GetArea/", data);
            if (_jsonData != '') {
                _jsonData = JSON.parse(_jsonData);
                _message = _jsonData.Message;
                _status = _jsonData.Status;
                areaVM = _jsonData.Record;
            }
            if (_status == "OK") {
                return areaVM;
            }
            if (_status == "ERROR") {
                notyAlert('error', _message);
            }

        }
        catch (e) {
            console.log(e.message);
        }
    }

</script>
