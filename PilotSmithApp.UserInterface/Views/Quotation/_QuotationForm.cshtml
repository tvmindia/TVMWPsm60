
@model PilotSmithApp.UserInterface.Models.QuotationViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateQuotation", "Quotation", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessQuotation", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "QuotationForm" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EstimateID, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">

                        @Html.Action("EstimateSelectList", "Estimate", new { required = "" })
                        @Html.HiddenFor(model => model.EstimateID, htmlAttributes: new { @class = "", @id = "hdnEstimateID" })
                    </div>

                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.QuoteNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.QuoteNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "Autogenerared filed" } })
                        @Html.ValidationMessageFor(model => model.QuoteNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.QuoteDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.QuoteDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker" }, @autofocus = true })
                        @Html.ValidationMessageFor(model => model.QuoteDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.QuoteRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.QuoteRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.QuoteRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentStatusSelectList">
                            @Html.Action("DocumentStatusSelectList", "DocumentStatus", new { required = "required", code = "QUO" })
                        </div>
                        @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                    </div>
                </div>
                
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divCustomerSelectList">
                            @Html.Action("CustomerSelectList", "Customer", new { required = "" })
                        </div>
                    </div>
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
            </div>
            @if (Model.IsUpdate)
            {
                <div class="col-md-6 clearfix divsummerybox" style="min-height:200px;margin-top:-4.6%">
                    <div class="col-md-2 no-padding">

                    </div>
                        <div class="col-md-10 no-padding" style="background-color:transparent;min-height:350px;background-image:url(/Content/images/frame.png);background-repeat:no-repeat;background-size:63%">
                            <ul class="todo-list ui-sortable" style="margin-top:25%;width:59%;">
                                <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                    <span class="control-label pull-left" style="text-decoration:underline">@Html.DisplayNameFor(Model => Model.EmailSentYN):</span><br />
                                    <!-- todo text -->
                                    <div class="col-md-12"></div>
                                    @if (Model.EmailSentYN == null)
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">EMAIL NOT SEND</span>
                                    }
                                    else if (Model.EmailSentYN == true)
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">✔ EMAIL SEND</span>
                                    }
                                    else
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">EMAIL NOT SEND</span>
                                    }
                                </li>
                               
                                <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                    <span class="control-label pull-left" style="text-decoration:underline">@Html.DisplayNameFor(Model => Model.IsFinalApproved):</span><br />
                                    <!-- todo text -->
                                    <div class="col-md-12"></div>
                                    @if (Model.IsFinalApproved==null)
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">PENDING FOR FINAL APPROVAL</span>
                                    }
                                    else if(Model.IsFinalApproved==true)
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">✔ FINALY APPROVED</span>
                                    }
                                    else
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">✗ FINAL APPROVER REJECTED</span>
                                    }
                                        
                                </li>
                                <li class="pull-left" style="width: 92%;margin-left: 8%;background-color:transparent;padding: 0px">
                                    <span class="control-label pull-left" style="text-decoration:underline;">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus):</span><br />
                                    <!-- todo text -->
                                    <div class="col-md-12"></div>
                                    @if (Model.LatestApprovalStatus == null)
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">DRAFTED DOCUMENT</span>
                                    }
                                    else
                                    {
                                        <span class="control-label pull-left infospan" style="margin-left:9%!important">@Model.LatestApprovalStatusDescription</span>
                                    }
                                </li>
                            </ul>
                        </div>
                </div>
            }
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Other Details</div>
            <div class="form-group col-md-12">
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ValidUpToDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ValidUpToDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker" } })
                        @Html.ValidationMessageFor(model => model.ValidUpToDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ReferredByCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divReferredByCodeSelectList">
                            @Html.Action("ReferencePersonSelectList", "ReferencePerson", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.ReferredByCode, htmlAttributes: new { @class = "", @id = "hdnReferredByCode" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divAttendedByIDSelectList">
                            @Html.Action("AttendedBySelectList", "Employee", new { required = "", postingParams = "ResponsiblePersonID" })
                        </div>
                        @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnAttendedByID" })
                    </div>
                </div>
            </div>
            <div class="form-group col-md-12">

                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divBranchSelectList">
                            @Html.Action("BranchSelectList", "Branch", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.TermReferenceNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.TermReferenceNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.TermReferenceNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentOwnerID, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentOwnerSelectList">
                            @Html.Action("DocumentOwnerSelectList", "DocumentOwner", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.DocumentOwnerID, htmlAttributes: new { @class = "", @id = "hdnDocumentOwnerCode" })
                    </div>
                </div>
            </div>
            </div>
        </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">
                        Quotation Details
                        <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                        <a class="btn btn-openid pull-right" onclick="AddQuotationDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>

                    </div>

                    @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                    <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                        <table id="tblQuotationDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                            <thead>
                                <tr class="text-center TableHead">
                                    <th style="width:15%">Product Code</th>
                                    <th style="width:10%">Product Name</th>
                                    <th style="width:10%">Model</th>
                                    <th style="width:30%">Specification</th>
                                    <th style="width:5%">Quantity</th>
                                    <th style="width:5%">Rate(₹)</th>
                                    <th style="width:5%">Discount(₹)</th>
                                    <th style="width:5%">Taxable(₹)</th>
                                    <th style="width:5%">GST(₹)</th>
                                    <th style="width:5%">Total(₹)</th>
                                    <th style="width:5%">...</th>
                                </tr>
                            </thead>
                        </table>
                    </div>
                    <div class="col-md-7 no-left-padding">
                        @*<table id="tblQuotationOtherChargesDetailList" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                                <thead>
                                    <tr class="text-center TableHead">
                                        <th style="width:20%">Other Charge</th>
                                        <th style="width:20%">Charge Amount(₹)</th>
                                        <th style="width:20%">GST(₹)</th>
                                        <th style="width:20%">Total(₹)</th>
                                        <th style="width:20%">...</th>
                                    </tr>
                                </thead>
                            </table>*@
                    </div>
                    <div class="col-md-5" style="padding-right:3.7%">
                        <table class="table dataTable no-footer DetailSummerybox">
                            <tbody>
                                <tr>
                                    <td style="text-align: right">
                                        <label class="control-label" for="lblTaxTotal">GST Amount</label>
                                    </td>
                                    <td class="ApplyCurrency" style="text-align: right">
                                        <label class="control-label " for="" id="lblTaxTotal">00.00</label>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align: right">
                                        <label class="control-label" for="lblItemTotal">Total Taxable Amount</label>
                                    </td>
                                    <td class="ApplyCurrency" style="text-align: right">
                                        <label class="control-label " for="" id="lblItemTotal">00.00</label>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align: right">
                                        <label class="control-label" for="lblGrossAmount">Gross Amount</label>
                                    </td>
                                    <td class="ApplyCurrency" style="text-align: right">
                                        <label class="control-label " for="" id="lblGrossAmount">00.00</label>
                                    </td>
                                </tr>
                                <tr>
                                    <td style="text-align: right">
                                        <label class="control-label " for="Discount">Cash Discount</label>
                                    </td>
                                    <td style="text-align: right;padding: 0px!important">
                                        @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control newinput ApplyCurrency Amount", onchange = "CalculateGrandTotal(this.value)", @onkeypress = "return isNumber(event)" } })
                                    </td>
                                </tr>
                                <tr class="odd">
                                    <td style="text-align: right">
                                        <label class="control-label " for="lblGrandTotal">Grand Total</label>
                                    </td>
                                    <td class="ApplyCurrency" style="text-align: right">
                                        <label class="control-label " for="" id="lblGrandTotal" style="font-weight: bold !important;">00.00</label>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Notes & Addresses</div>
                    <div class="form-group col-md-12">
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.MailingAddress, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.MailingAddress, 5, 0, new { @class = "form-control newinput" })
                                @Html.ValidationMessageFor(model => model.MailingAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ShippingAddress, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.ShippingAddress, 5, 0, new { @class = "form-control newinput" })
                                @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                    <div class="form-group col-md-12">
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                                @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </div>
                </div>
            </div>
            <div class="col-md-11 divbox1">
                <div class="col-md-12 divbox2">
                    <div class="col-md-12 headSeperator">Quotation Attachments</div>
                    @Html.Partial("_Fileupload")
                </div>
            </div>
            <div class="" hidden="hidden">
                <div class="col-md-offset-2 col-md-10">
                    <input id="btnInsertUpdateQuotation" type="submit" value="Create" class="btn btn-default" />
                </div>
            </div>
            }
            <script>
                $(document).ready(function () {
                    try {
                        $.validator.unobtrusive.parse("#QuotationForm");
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('input.datepicker').datepicker({
                            format: "dd-M-yyyy",
                            maxViewMode: 0,
                            todayBtn: "linked",
                            clearBtn: true,
                            autoclose: true,
                            todayHighlight: true
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        //Fileupload
                        $('#btnUpload').click(function () {
                            debugger;
                            //Pass the controller name
                            var FileObject = new Object;
                            if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                                FileObject.ParentID = (($('#QuotationForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#QuotationForm #ID').val()) : $('#hdnFileDupID').val());
                            }
                            else {
                                FileObject.ParentID = ($('#QuotationForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#QuotationForm #ID').val();
                            }


                            FileObject.ParentType = "Quotation";
                            FileObject.Controller = "FileUpload";
                            UploadFile(FileObject);
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('#QuotationGradeCode').select2({});
                        $('.select2').addClass('form-control newinput');
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                    try {
                        $('#QuotationForm #EstimateID').change(function () {
                            OnServerCallBegin();
                            $("#divQuotationForm").load("Quotation/QuotationForm?id=" + _emptyGuid + "&estimateID=" + this.value, function () {
                                $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#QuotationForm #hdnCustomerID').val());
                                BindQuotationDetailList("00000000-0000-0000-0000-000000000000", true);
                                OnServerCallComplete();
                            });
                        });
                    }
                    catch (e) {
                        console.log(e.message);
                    }
                });
            </script>
