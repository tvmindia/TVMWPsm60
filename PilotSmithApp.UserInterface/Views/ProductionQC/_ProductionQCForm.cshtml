@model PilotSmithApp.UserInterface.Models.ProductionQCViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateProductionQC", "ProductionQC", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProductionQC", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "ProductionQCForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.DocumentStatus.Description, htmlAttributes: new { @class = "", @id = "hdnDescription" })
     <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                @if (!Model.IsUpdate)
                {
                    <div class="col-md-12 no-padding" id="divProductionOrderSelectList">
                        <div class="col-md-12">
                            @Html.Label("Search and select a Production Order", htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.ProdOrderID, Model.ProdOrderSelectList, "Search Production Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnProdOrderID').val(this.value)" })
                            @Html.ValidationMessageFor(model => model.ProdOrderID, "", new { @class = "text-danger" })
                        </div>
                        @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "", @id = "hdnProdOrderID" })
                    </div>

                }
                else
                {
                    if (Model.ProdOrderID != null)
                    {
                        <div class="col-md-12 no-padding" id="divProductionOrderSelectList">
                            <div class="col-md-12">
                                @Html.Label("Production Order", htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                @*@Html.DropDownListFor(model => model.ProdOrderID, Model.ProdOrderSelectList, "Search Production Order", new { @class = "form-control newinput", @style = "width:100%!important", @disabled = "", @onchange = "$('#hdnProdOrderID').val(this.value)" })*@
                                @*@Html.ValidationMessageFor(model => model.ProdOrderID, "", new { @class = "text-danger" })*@
                                <span class="form-control newinput" id="spanProdOrderID" style="background-color:#eeeeee">@Model.ProdOrderNo</span>
                            </div>
                            @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "", @id = "hdnProdOrderID" })
                        </div>
                    }
                }

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdQCNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdQCNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.ProdQCNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                @if (Model.IsUpdate)
                {
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ProdQCDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ProdQCDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off", @data_toggle = "popover", @data_content = "Select date with in financial year", @data_placement = "top" } })
                            @Html.ValidationMessageFor(model => model.ProdQCDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ProdQCDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ProdQCDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off"} })
                            @Html.ValidationMessageFor(model => model.ProdQCDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdQCRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdQCRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.ProdQCRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPlantSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            @*@Html.Action("PlantSelectList", "Plant", new { required = "" })*@
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPlantRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnPlantdisabled", false)
                    @Html.HiddenFor(model => model.PlantCode, htmlAttributes: new { @class = "", @id = "hdnPlantCode" })
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblRequired" })
                    </div>
                    @if (Model.IsUpdate || Model.ProdOrderID != null)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput" style="background-color:#eeeeee">@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                    }

                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12">
                                <span class="form-control newinput" style="background-color:#eeeeee">@Model.Branch.Description</span>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <div class="divBranchSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                    @*@Html.Action("BranchSelectList", "Branch", new { required = "required" })*@
                                </div>
                            </div>
                        }
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBranchRequired", "required")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnBranchdisabled", false)
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                    @*<div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            <div class="divDocumentStatusSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                              
                            </div>
                        </div>
                       
                        @Html.Hidden("hdnDocumentStatusRequired", "required")
                        @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                    </div>*@
                </div>
            </div>
            @*@if (Model.IsUpdate)
                {*@
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                      
                        @*<div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>*@
                        @if (Model.IsUpdate)
                        {
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">Document Status</div>
                            </div>
                            @*<div class="form-group col-md-12">
                                <label class="switch switch-flat">
                                    <input class="switch-input" type="checkbox" checked />
                                    <span class="switch-label" data-on="Open" data-off="Closed"></span>
                                    <span class="switch-handle"></span>
                                </label>
                            </div>*@
                        if (Model.IsDocLocked)
                        {
                            <div class="form-group col-md-4">
                                <div class="divDocumentStatusSelectList doc-status">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                </div>
                                @Html.Hidden("hdnDocumentStatusRequired", "required")
                                @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-md-4">
                                <span class="form-control newinput" style="border-radius: 4px!important;background-color:#eeeeee;color:black;text-align:center;" title="Document Locked">@Model.DocumentStatus.Description</span>
                            </div>
                            }
                        }
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Approval Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.ProdQCNo" documentType="PQC" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
            @*<div class="form-group col-md-6 stausCombined">
                    <div class="boxstatus boxstatus2 shadow2">
                        <div class="Shadow2data clearfix">
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.EmailSentYN)</div>
                            </div>
                            <div class="form-group col-md-12">

                                @if (Model.EmailSentYN == null)
                                {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                                }
                                else if (Model.EmailSentYN == true)
                                {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                                }
                                else
                                {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                                }
                            </div>
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus)</div>
                            </div>
                            <div class="form-group col-md-12">

                                @if (Model.LatestApprovalStatus == null)
                                {
                                    <div class="lblStatusDisplay">DRAFTED DOCUMENT</div>
                                }
                                else
                                {
                                    <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                                }
                            </div>
                        </div>

                    </div>
                </div>*@
            @*}*@
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                Quality Control Details@*<a class="btn btn-openid pull-right" onclick="AddProductionQCDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>*@
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblProductionQCDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:2%">Sl.No</th>
                            <th style="width:25%">Product</th>
                            <th style="width:10%">HSN Code</th>
                            <th style="width:10%">Prod.Ord.Qty</th>
                            <th style="width:10%">Comp.QC.Qty</th>
                            <th style="width:15%">Curr.QC.Qty</th>
                            <th style="width:15%">QC Date</th>
                            <th style="width:10%">QC By</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Notes</div>
            <div class="form-group col-md-12">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>
        <div class="col-md-11 divbox1">
            <div class="col-md-12 divbox2">
                <div class="col-md-12 headSeperator">Attachments</div>
                @Html.Partial("_Fileupload")
            </div>
        </div>
        <div class="" hidden="hidden">
            <div class="col-md-offset-2 col-md-10">
                <input id="btnInsertUpdateProductionQC" type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
}
<script>
    $(document).ready(function () {
        $('[data-toggle="popover"]').popover({
        });
        try {

            debugger;
            //$('.switch-input').on('change', function () {
            //    debugger;
            //    var isChecked = $(this).is(':checked');
            //    var selectedData;
            //    var $switchLabel = $('.switch-label');
            //    console.log('isChecked: ' + isChecked);

            //    if (isChecked) {
            //        selectedData = $switchLabel.attr('data-on');

            //    } else {
            //        selectedData = $switchLabel.attr('data-off');
            //    }

            //    $.get("DocumentStatus/CloseDocument/?id=" + $('#ProductionQCForm #ID').val() + "&doctype=PQC" + "&docstatus=" + selectedData, function (data) {
            //        debugger;
            //        // var JsonResult = JSON.parse(data)
            //        if (data == "1") {
            //            //   $('#anchorOpenSODInTab').trigger('click');
            //            BindOrReloadProductionQCTable();
            //            // notyAlert('success', "Document status changed successfully!");
            //        }
            //        else {
            //            notyAlert('error', "Failed to change document status!");

            //            //  alert("Quotation not exist!");
            //        }

            //    });


            //    //  console.log('Selected data: ' + selectedData);
            //    //  alert(selectedData);
            //});


        }
        catch (e) {

        }
        try {
            $.validator.unobtrusive.parse("#ProductionQCForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('.divPlantSelectList').load('/Plant/PlantSelectList?required=' + $('#hdnPlantRequired').val())
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=PQC&required=' + $('#hdnDocumentStatusRequired').val(), function (responseTxt, statusTxt, xhr) {
                $('#DocumentStatusCode').change(function () {
                    StatusChange();
                });
            });
            function StatusChange() {
                var selectedData = $("#DocumentStatusCode option:selected").text();
                $.get("DocumentStatus/CloseDocument/?id=" + $('#ProductionQCForm #ID').val() + "&doctype=PQC" + "&docstatus=" + selectedData, function (data) {
                    debugger;

                    if (data == "1") {
                        BindOrReloadProductionQCTable();
                        //notyAlert('success', "Document status changed successfully!");
                    }
                    else {
                        notyAlert('error', "Failed to change document status!");
                    }

                });
            }
            @if (Model.IsUpdate||Model.ProdOrderID!=null)
         {
                <text>
            var prodQCDate = $('#ProdQCDateFormatted').val();
            if (prodQCDate != "") {


                function getCurrentFinancialYear(prodQCDate) {
                    debugger;
                    var startYear = "";
                    var endYear = "";
                    var docDate = new Date(prodQCDate);
                    if ((docDate.getMonth() + 1) <= 3) {
                        startYear = docDate.getFullYear() - 1;
                        endYear = docDate.getFullYear();
                    }
                    else {
                        startYear = docDate.getFullYear();
                        endYear = docDate.getFullYear() + 1;
                    }
                    return { startDate: "01-Apr-" + startYear, endDate: "31-Mar-" + endYear };
                }
                $('#ProdQCDateFormatted').datepicker({
                    format: "dd-M-yyyy",
                    maxViewMode: 0,
                    todayBtn: "linked",
                    clearBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    startDate: getCurrentFinancialYear(prodQCDate).startDate,
                    endDate: getCurrentFinancialYear(prodQCDate).endDate
                });
            }
            </text>
         }
         else
         {
             <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () { });
            </text>
         }
            @if ((!Model.IsUpdate) && (Model.ProdOrderID!=null))
         {
             <text>
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });
            </text>
         }
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProdQCDateFormatted').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#ProductionQCForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ProductionQCForm #ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#ProductionQCForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ProductionQCForm #ID').val();
                }


                FileObject.ParentType = "ProductionQC";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProdOrderID').val($('#hdnProdOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnProdOrderID').val());
            $('#ProdOrderID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "ProductionOrder/GetProductionOrderSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('.select2').addClass('form-control newinput');


            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProductionQCForm #ProdOrderID').change(function () {
                OnServerCallBegin();
                $("#divProductionQCForm").load("ProductionQC/ProductionQCForm?id=" + _emptyGuid + "&productionOrderID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#ProductionQCForm #hdnCustomerID').val());
                    BindProductionQCDetailList("00000000-0000-0000-0000-000000000000", true);
                    OnServerCallComplete();
                });
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            if ($('#ProductionQCForm #IsDocLocked').val() == "False" && $('#ProductionQCForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

