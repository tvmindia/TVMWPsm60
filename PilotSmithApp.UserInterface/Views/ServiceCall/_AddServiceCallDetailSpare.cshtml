@model PilotSmithApp.UserInterface.Models.ServiceCallDetailViewModel

@{
    List<SelectListItem> yesNoList = new List<SelectListItem>();
    yesNoList.Add(new SelectListItem
    { Text = "Yes", Value = "True" });
    yesNoList.Add(new SelectListItem
    { Text = "No", Value = "False" });
    yesNoList.Add(new SelectListItem
    { Text = "Not Set", Value = "", Selected = true });
}

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormServiceCallDetailSpare" }))
{
    @Html.HiddenFor(model => model.ServiceCallID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.SpareID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divSpareSelectList">
                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("ProductSelectList", "Product", new { required = "required" })*@
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnSpareRequired", "required")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnSparedisabled", false)
            @Html.HiddenFor(model => model.SpareID, htmlAttributes: new { @class = "", @id = "hdnSpareID" })
        </div>
        <div class="col-md-12 no-padding">

            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.GuaranteeYN, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.DropDownListFor(model => model.GuaranteeYN, yesNoList, htmlAttributes: new { @class = "form-control newinput" })
                    @Html.HiddenFor(model => model.GuaranteeYN, htmlAttributes: new { @class = "" })
                </div>
            </div>

            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ServiceStatusCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    <div class="divServiceStatusSelectList">
                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                        @*@Html.Action("ServiceStatusSelectList", "DocumentStatus", new { required = "", code = "SRC" })*@
                    </div>
                </div>
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnServiceStatusRequired", "")
                @Html.HiddenFor(model => model.ServiceStatusCode, htmlAttributes: new { @class = "", @id = "hdnServiceStatusCode" })
            </div>

        </div>

    </div>
    @*</div>*@
    <div class="modal-footer d-flex justify-content-center">
        <button class="btn btn-default" id="btnAddServiceCallDetail" onclick="AddServiceCallDetailSpareToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
    </div>
}

<script>
    $(document).ready(function () {
        debugger;
        //$.validator.unobtrusive.parse("#FormServiceCallDetailSpare");
        try {
            $('.divSpareSelectList').load('/Spare/SpareSelectList?required=' + $('#hdnSpareRequired').val() + '&disabled=' + $('#hdnSparedisabled').val());
            $('.divServiceStatusSelectList').load('/DocumentStatus/ServiceStatusSelectList?code=SRC&required=' + $('#hdnServiceStatusRequired').val());
        }
        catch (e) {
            console.log(e.message);
        }

        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }

        $('#divModelPopServiceCall #GuaranteeYN').select2({
            dropdownParent: $("#divModelPopServiceCall"),
            width: "100%"
        });

        $('.select2').addClass('form-control newinput');

    });
</script>