@model PilotSmithApp.UserInterface.Models.ProductionOrderDetailViewModel

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormProductionOrderDetail" }))
{
    @Html.HiddenFor(model => model.ProdOrderID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.SaleOrderQty, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model=>model.SaleOrderID,htmlAttributes:new { @class="",@id="hdnSaleOrderIDForDetail"})
    @Html.HiddenFor(model=>model.SaleOrderDetailID,htmlAttributes:new { @class="",@id="hdnSaleOrderDetailID"})
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "", @id = "hdnProductionOrderDetailID" })
    @*@Html.HiddenFor(model => model.PrevProducedQty, htmlAttributes: new { @class = "",@id="hdnPrevProducedQty" })
    @Html.HiddenFor(model => model.TotalProducedQty, htmlAttributes: new { @class = "" ,@id="hdnTotalProducedQty"})*@
    @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderIDForDetail" })
    @Html.HiddenFor(model => model.SaleOrderDetailID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderDetailID" })
    @Html.HiddenFor(model => model.Rate, htmlAttributes: new { @class = "", @id = "hdnSaleOrderRate" })
    @Html.HiddenFor(model => model.ShowRate, htmlAttributes: new { @class = "", @id = "hdnShowRate" })  
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            @if (Model.IsUpdate)
            {
                <div class="col-md-12">
                    <span id="productName" class="form-control newinput" style="background-color:#eeeeee"></span>
                </div>
            }
            else
            {
                <div class="col-md-12">
                    <div class="divProductSelectList">
                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                        @*@Html.Action("ProductSelectList", "Product", new { required = "required" })*@
                    </div>
                </div>
            }
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductRequired", "required")
            @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductModelID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            @*<div class="col-md-12">*@
            @if (Model.IsUpdate)
                {
                <div class="col-md-12">
                    <span id="productModelName" class="form-control newinput" style="background-color:#eeeeee"></span>
                </div>
            }
            else
            {
                <div class="col-md-12">
                    <div class="divProductModelSelectList">
                        <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                        @*@Html.Action("ProductModelSelectList", "ProductModel", new { required = "required" })*@
                    </div>
                </div>
            }
            @*</div>*@
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductModelRequired", "required")
            @Html.HiddenFor(model => model.ProductModelID, htmlAttributes: new { @class = "", @id = "hdnProductModelID" })
        </div>
        <div id="divProductBasicInfo">
            @Html.Action("ProductBasicInfo", "Product", new { ID = Guid.Empty })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductSpec, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ProductSpec, 4, 0, new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.ProductSpec, "", new { @class = "text-danger" })
            </div>
        </div>

        @*<div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    <div class="divUnitSelectList">
                        @Html.Action("UnitSelectList", "Unit", new { required = "" })
                    </div>
                    @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
                </div>
            </div>

            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-4 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ProducedQty, htmlAttributes: new { @class = "control-label " })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.ProducedQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                    @Html.ValidationMessageFor(model => model.ProducedQty, "", new { @class = "text-danger" })
                </div>
            </div>*@

    </div>
    <div class="form-group col-md-12 no-padding">
        @if (Model.ShowRate == true)
        {
            <div class="col-md-4 no-padding">

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divUnitSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            @*@Html.Action("UnitSelectList", "Unit", new { required = "required" })*@
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnUnitRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnUnitdisabled", false)
                    @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div id="orderQtyID" class="col-md-12">
                        @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)", @onchange= "$('#ProducedQty').val(this.value)" } })
                        @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProducedQty, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div id="producedQtyID" class="col-md-12">
                        @Html.EditorFor(model => model.ProducedQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                        @Html.ValidationMessageFor(model => model.ProducedQty, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @*<span class="control-label">Rate (<span class="control-label" id="detailCurRate">INR</span>)</span>*@ 
                        @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label " })  (<span class="control-label" id="detailCurRate"> INR </span>)
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency CalculateGST", @onkeypress = "return isNumber(event)" } })
                        @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPlantSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            @*@Html.Action("PlantSelectList", "Plant", new { required = "" })*@
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPlantRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnPlantdisabled", false)
                    @Html.HiddenFor(model => model.PlantCode, htmlAttributes: new { @class = "", @id = "hdnPlantCode" })
                </div>
                @*<div class="col-md-12">&nbsp;</div>*@
            </div>
        }
        else
        {
            <div class="col-md-4 no-padding">

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divUnitSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            @*@Html.Action("UnitSelectList", "Unit", new { required = "required" })*@
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnUnitRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnUnitdisabled", false)
                    @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div id="orderQtyID" class="col-md-12">
                            @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                            @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
                        </div>
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProducedQty, htmlAttributes: new { @class = "control-label " })
                    </div>
                    <div id="producedQtyID" class="col-md-12">
                        @Html.EditorFor(model => model.ProducedQty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                        @Html.ValidationMessageFor(model => model.ProducedQty, "", new { @class = "text-danger" })
                    </div>
                </div>

                @*<div class="col-md-12 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label " })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency CalculateGST", @onkeypress = "return isNumber(event)" } })
                            @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
                        </div>
                    </div>*@
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PlantCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPlantSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            @*@Html.Action("PlantSelectList", "Plant", new { required = "" })*@
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPlantRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnPlantdisabled", false)
                    @Html.HiddenFor(model => model.PlantCode, htmlAttributes: new { @class = "", @id = "hdnPlantCode" })
                </div>
                @*<div class="col-md-12">&nbsp;</div>*@
            </div>
        }

        <div class="no-padding" style="font-size:14px;margin-left:300px;">
            @Html.Label("Milestone")
            @*<div class="col-md-12">&nbsp;</div>*@
        </div>
        <div class="col-md-8 no-padding rcorners2" style="top:5px;">

            <div class="col-md-12">&nbsp;</div>
            @*<div class="col-md-12 no-padding" style="border-left:1px solid #c2dee0;">*@


            <table style="margin-left:10px;">
                <tr>
                    <th></th>
                    <th style="text-align:center;font-size:12px;">
                        Forecast Date
                        <div class="col-md-12">&nbsp;</div>
                    </th>
                    <th style="text-align:center;font-size:12px;">
                        Actual Date
                        <div class="col-md-12">&nbsp;</div>
                    </th>
                </tr>
                <tr>
                    <td>
                        MileStone 1 (25%)
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone1FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone1FcFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone1AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone1AcTFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>

                </tr>
                <tr>
                    <td>
                        MileStone 2 (50%)
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone2FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone2FcFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone2AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone2AcTFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        MileStone 3 (75%)
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone3FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone3FcFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone3AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone3AcTFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                </tr>
                <tr>
                    <td>
                        MileStone 4 (100%)
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone4FcFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone4FcFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                    <td>
                        <div class="col-md-10 no-padding">
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.MileStone4AcTFinishDtFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.MileStone4AcTFinishDtFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="col-md-12">&nbsp;</div>
                    </td>
                </tr>
            </table>
        </div>
    </div>
    @*</div>*@
    <div class="modal-footer d-flex justify-content-center">
        <button class="btn btn-default" id="btnAddProductionOrderDetail" onclick="AddProductionOrderDetailToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
    </div>
}
<script>
    $(document).ready(function () {
        $.validator.unobtrusive.parse("#FormProductionOrderDetail");
        $('#OrderQty').change(function () {
            debugger
            $('#ProducedQty').val(this.value);
            $("#producedQtyID span").text("");
            $("i").removeClass('fa fa-exclamation');
        });
        try {
            @if (Model.IsUpdate)
        {

        }
        else {
            <text>
            $('.divProductSelectList').load('/Product/ProductSelectList?required=' + $('#hdnProductRequired').val())
            </text>
        }
            //    $('.divProductSelectList').load('/Product/ProductSelectList?required=' + $('#hdnProductRequired').val(), function () {
            //        $('#divModelPopProductionOrder #ProductID').change(function () {
            //        if ($('#divProductBasicInfo') != undefined) {
            //                $('#divModelPopProductionOrder #divProductBasicInfo').load("Product/ProductBasicInfo?ID=" + (this.value == "" ? '00000000-0000-0000-0000-000000000000' : this.value), function () {
            //                    $('#divModelPopProductionOrder #ProductSpec').val($('#divModelPopProductionOrder #spnProductName').text());
            //            });
            //        }
            //        if ($('.divProductModelSelectList') != undefined) {
            //                $('#dropLoad').addClass('fa fa-spinner fa-spin');
            //            if (this.value != "") {
            //                    $('.divProductModelSelectList').load("ProductModel/ProductModelSelectList?required=" + $('hdnProductModelRequired').val() + "&productID=" + this.value)
            //                }
            //            else {
            //                    $('.divProductModelSelectList').empty();
            //                    $('.divProductModelSelectList').append('<span class="form-control newinput"><i id="dropLoad" class="fa fa-spinner"></i></span>');
            //            }
            //        }
            //    });
            //});
            $('.divUnitSelectList').load('/Unit/UnitSelectList?required=' + $('#hdnUnitRequired').val())
            $('.divPlantSelectList').load('/Plant/PlantSelectList?required=' + $('#hdnPlantRequired').val())
        }
        catch (e) {
            console.log(e.message);
        }
        $('#divModelPopProductionOrder #ProductID,#divModelPopProductionOrder #UnitCode', '#divModelPopProductionOrder #PlantCode').select2({
            dropdownParent: $("#divModelPopProductionOrder")
        });

        $('.select2').addClass('form-control newinput');

        //For Currency
        $('#detailCurRate').text($('#hdnCurrencyCode').val())

        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }

    });
</script>

<style>
    .rcorners2 {
        border-radius: 25px;
        border: 1px solid #068a78;
        /*padding: 20px;*/
        width: 500px;
        height: 243px;
    }
</style>
