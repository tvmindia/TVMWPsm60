@model PilotSmithApp.UserInterface.Models.ProductModelViewModel

@using (Ajax.BeginForm("InsertUpdateProductModel", "ProductModel", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProductModel", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormProductModel" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })


    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                <div class="divProductCategorySelectList">
                    @Html.Action("ProductSelectList", "Product", new { required = "" })
                </div>
                @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
            </div>
        </div>
    </div>

    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control newinput" } })
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group col-md-12 no-padding">
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12 divUnitSelectList">
                    @Html.Action("UnitSelectList", "Unit", new { required = "" })
                </div>
                @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
            </div>
        </div>

    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Specification, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.Specification, 4, 0, htmlAttributes: new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.Specification, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group col-md-12 no-padding">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CostPrice, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.CostPrice, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.CostPrice, "", new { @class = "text-danger" })
            </div>
        </div>


        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.SellingPrice, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.SellingPrice, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.SellingPrice, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group col-md-12 no-padding">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.IntroducedDateFormatted, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.IntroducedDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput" } })
                @Html.ValidationMessageFor(model => model.IntroducedDateFormatted, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.StockQty, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.StockQty, new { htmlAttributes = new { @class = "form-control newinput" } })
                @Html.ValidationMessageFor(model => model.StockQty, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    
        @*<div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ImageURL, htmlAttributes: new { @class = "control-label " })
            </div> 
            <div class="col-md-12 ">
                <input type="hidden" id="hdnFileSizebytes" value=0 />
                <input type="file" multiple id="FileUpload1" style="display:none;" onchange="BindFiles()" />
                <input type="button" value="SELECT FILES" onclick="$('#FileUpload1').click();" class="btn attachbutton" style="color:#246076;font-weight:500;" />
                <input type="button" id="btnUpload" value="UPLOAD FILES" class="btn uploadbtn" />
                <input type="button" id="btnCancel" value="CANCEL" onclick="cancelAll()" class="btn" style="color:#000000;font-weight:500;" />
                <input id="browse" type="file">
                @Html.ValidationMessageFor(model => model.ImageURL, "", new { @class = "text-danger" }) 
            </div>
        </div>*@
   

        <div class="modal-footer d-flex justify-content-center">
            <button class="btn btn-default" type="submit" id="btnSaveMaster" style="margin-right:3%;margin-top:2%">Save Changes <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
        </div>
}
<script>
    $(document).ready(function () {
        $('#ProductModelID').val($('#hdnProductModelID').val());
        try {
            $('#ProductID,#UnitCode').select2({
                dropdownParent: $("#divModelMasterPopUp")
            });
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        $.validator.unobtrusive.parse("#FormProductModel");         
        try{
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",//",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch(e){
            console.log(e.message);
        }
    });
</script>
