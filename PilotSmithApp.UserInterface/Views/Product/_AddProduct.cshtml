@model PilotSmithApp.UserInterface.Models.ProductViewModel
<style>
    #divModelMasterPopUp3 .modal-dialog {
    width: 65% !important;
}
</style>
@using (Ajax.BeginForm("InsertUpdateProduct", "Product", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProduct", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormProduct" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnPopupFileID, htmlAttributes: new { @class = "", @id = "hdnPopupFileDupID", @value = Guid.Empty })  
     <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Code, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Code, new { htmlAttributes = new { @class = "form-control newinput" } })
                    @Html.ValidationMessageFor(model => model.Code, "", new { @class = "text-danger" })
                </div>
            </div>
            
        </div>

        <div class="col-md-12 no-padding">
            
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control  newinput" } })
                    @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
                </div>
            </div>
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.TallyName, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.TallyName, new { htmlAttributes = new { @class = "form-control newinput" } })
                    @Html.ValidationMessageFor(model => model.TallyName, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.ProductCategoryCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    <div class="divProductCategorySelectList">
                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                        @*@Html.Action("ProductCategorySelectList", "ProductCategory", new { required = "" })*@
                    </div>
                </div>
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnProductCategoryRequired", "")
                <!-- This hidden field will keep the information whether the field is disabled or not -->
                @Html.Hidden("hdnProductCategorydisabled", false)
                @Html.HiddenFor(model => model.ProductCategoryCode, htmlAttributes: new { @class = "", @id = "hdnProductCategoryCode" })
            </div>
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.IntroducedDateFormatted, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.IntroducedDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput" ,autocomplete = "off" } })
                    @Html.ValidationMessageFor(model => model.IntroducedDateFormatted, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        <div class="col-md-12 no-padding">
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.CompanyID, htmlAttributes: new { @class = "control-label" })
                </div>
                @*</div>*@
                <div class="col-md-12">
                    <div class="divCompanySelectList">
                        <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                    </div>
                </div>
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnCompanyRequired", "")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnCompanydisabled", false)
            @Html.HiddenFor(model => model.CompanyID, htmlAttributes: new { @class = "", @id = "hdnCompanyID" })
            <div class="col-md-6 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.HSNCode, htmlAttributes: new { @class = "control-label" })
                </div>
                <div class="col-md-12">
                    @Html.EditorFor(model => model.HSNCode, new { htmlAttributes = new { @class = "form-control newinput", } })
                    @Html.ValidationMessageFor(model => model.HSNCode, "", new { @class = "text-danger" })
                </div>
            </div>
        </div>

        
    </div>
    <div class="col-md-11 divbox1" style="margin-left: 0% !important;width: 96.666667% !important;">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Attachments</div>
            @Html.Partial("_PopupFileupload")
        </div>
    </div>
                <div class="modal-footer d-flex justify-content-center">
                    <button class="btn btn-default" type="submit" id="btnSaveMaster" style="margin-right:3%;margin-top:2%">Save Changes <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
                </div>
}

<script>
    $(document).ready(function () {
        $.validator.unobtrusive.parse("#FormProduct");
        $('#ProductID').val($('#hdnProductID').val());
        $('.divProductCategorySelectList').load('/ProductCategory/ProductCategorySelectList?required=' + $('#hdnProductCategoryRequired').val())
        $('.divCompanySelectList').load('/Company/CompanySelectList?required=' + $('#hdnCompanyRequired').val(), function () {
            $('#FormProduct #CompanyID').select2({
                dropdownParent: $("#divModelMasterPopUp3")
            });
        })
        try {
            $('#CompanyID,#ProductCategoryCode').select2({
                dropdownParent: $("#divModelMasterPopUp3")
            });
            $('.select2').addClass('form-control newinput');

            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });

        }
        catch (e) {
            console.log(e.message);
        }

        $('input.datepicker').datepicker({
            format: "dd-M-yyyy",//",
            maxViewMode: 0,
            todayBtn: "linked",
            clearBtn: true,
            autoclose: true,
            todayHighlight: true
        });
        try {
        //    $('.divModelMasterPopUp #modal-dialog').modal-dialog {
        //    width: 780px;
        //    margin: 30px auto;
        //}
        //    $('.divModelMasterPopUp .modal-body').height('50px');
            //Fileupload
            $('#btnPopupUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnPopupFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#FormProduct #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#FormProduct #ID').val()) : $('#hdnPopupFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#FormProduct #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#FormProduct #ID').val();
                }


                FileObject.ParentType = "Product";
                FileObject.Controller = "FileUpload";
                UploadPopupFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>
