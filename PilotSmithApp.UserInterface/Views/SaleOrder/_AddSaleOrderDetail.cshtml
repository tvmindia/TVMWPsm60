@model PilotSmithApp.UserInterface.Models.SaleOrderDetailViewModel

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormSaleOrderDetail" }))
{
    @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divProductSelectList">
                    @Html.Action("ProductSelectList", "Product", new { required = "required" })
                </div>
                @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnProductRequired", "required")
            </div>
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductModelID, htmlAttributes: new { @class = "control-label" })
            </div>
            <div class="col-md-12">
                <div class="divProductModelSelectList">
                    <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                    @*@Html.Action("ProductModelSelectList", "ProductModel", new { required = "required" })*@
                </div>
                @Html.HiddenFor(model => model.ProductModelID, htmlAttributes: new { @class = "", @id = "hdnProductModelID" })
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnProductModelRequired", "required")
            </div>
        </div>
        <div id="divProductBasicInfo">
            @Html.Action("ProductBasicInfo", "Product", new { ID = Guid.Empty })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductSpec, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ProductSpec, 4, 0, new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.ProductSpec, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divUnitSelectList">
                    @Html.Action("UnitSelectList", "Unit", new { required = "required" })
                </div>
                @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.TaxTypeCode, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                <div class="divTaxTypeSelectList">
                    @Html.Action("TaxTypeSelectList", "TaxType", new { required = "" })
                </div>
                @Html.HiddenFor(model => model.TaxTypeCode, htmlAttributes: new { @class = "CalculateGST", @id = "hdnTaxTypeCode" })
            </div>
        </div>
    </div>
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Qty, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Qty, new { htmlAttributes = new { @class = "form-control newinput Amount CalculateGST", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.Qty, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Rate, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Rate, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency CalculateGST", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.Rate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.Discount, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency CalculateGST", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.Discount, "", new { @class = "text-danger" })
            </div>
        </div>
        
    </div>
    <div class="form-group col-md-12 no-padding" id="divGSTCalculatedFields">
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.SGSTPerc, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.HiddenFor(model => model.SGSTPerc, htmlAttributes: new { @id = "hdnSGSTPerc" })
                @Html.EditorFor(model => model.SGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)",@readonly="" } })
                @Html.ValidationMessageFor(model => model.SGSTPerc, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CGSTPerc, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.HiddenFor(model => model.CGSTPerc, htmlAttributes: new { @id = "hdnCGSTPerc" })
                @Html.EditorFor(model => model.CGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                @Html.ValidationMessageFor(model => model.CGSTPerc, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.IGSTPerc, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.HiddenFor(model => model.IGSTPerc, htmlAttributes: new { @id = "hdnIGSTPerc" })
                @Html.EditorFor(model => model.IGSTPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                @Html.ValidationMessageFor(model => model.IGSTPerc, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>
    <div class="form-group col-md-12 no-padding" id="divCessCalculatedFields">
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CessPerc, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.CessPerc, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyPercentage CalculateGST", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.CessPerc, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-6 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.CessAmt, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.CessAmt, new { htmlAttributes = new { @class = "form-control newinput Amount ApplyCurrency", @onkeypress = "return isNumber(event)", @readonly = "" } })
                @Html.ValidationMessageFor(model => model.CessAmt, "", new { @class = "text-danger" })
            </div>
        </div>
        </div>
        <div class="modal-footer d-flex justify-content-center">
            <button class="btn btn-default" id="btnAddSaleOrderDetail" onclick="AddSaleOrderDetailToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
        </div>
        }
        <script>
            $(document).ready(function () {
                $.validator.unobtrusive.parse("#FormSaleOrderDetail");
                $('#divModelPopSaleOrder #ProductID,#divModelPopSaleOrder #UnitCode,#divModelPopSaleOrder #TaxTypeCode,#divModelPopSaleOrder #ProductModelID').select2({
                    dropdownParent: $("#divModelPopSaleOrder")
                });
                $('.select2').addClass('form-control newinput');
                $('#divModelPopSaleOrder #ProductID').change(function () {
                    if ($('#divProductBasicInfo') != undefined) {
                        $('#divModelPopSaleOrder #divProductBasicInfo').load("Product/ProductBasicInfo?ID=" + (this.value == "" ? '00000000-0000-0000-0000-000000000000' : this.value), function () {
                            $('#divModelPopSaleOrder #ProductSpec').val($('#divModelPopSaleOrder #spnProductName').text());
                        });
                    }
                    if ($('.divProductModelSelectList') != undefined) {
                        $('#dropLoad').addClass('fa fa-spinner fa-spin');
                        if (this.value != "") {
                            $('.divProductModelSelectList').load("ProductModel/ProductModelSelectList?required=required&productID=" + this.value)
                        }
                        else {
                            $('.divProductModelSelectList').empty();
                            $('.divProductModelSelectList').append('<span class="form-control newinput"><i id="dropLoad" class="fa fa-spinner"></i></span>');
                        }
                    }
                });
                $('#divModelPopSaleOrder .CalculateGST').change(function () {
                    debugger;
                    var qty = parseInt($('#divModelPopSaleOrder #Qty').val() != "" ? $('#divModelPopSaleOrder #Qty').val() : 1);
                    var rate = parseFloat($('#divModelPopSaleOrder #Rate').val() != "" ? $('#divModelPopSaleOrder #Rate').val() : 0);
                    var discount = parseFloat($('#divModelPopSaleOrder #Discount').val() != "" ? $('#divModelPopSaleOrder #Discount').val() : 0);
                    var CGST = parseFloat($('#divModelPopSaleOrder #TaxTypeCode').val() != "" ? $('#divModelPopSaleOrder #TaxTypeCode').val().split('|')[1].split(',')[0].split('-')[1] : 0);
                    var SGST = parseFloat($('#divModelPopSaleOrder #TaxTypeCode').val() != "" ? $('#divModelPopSaleOrder #TaxTypeCode').val().split('|')[1].split(',')[1].split('-')[1] : 0);
                    var IGST = parseFloat($('#divModelPopSaleOrder #TaxTypeCode').val() != "" ? $('#divModelPopSaleOrder #TaxTypeCode').val().split('|')[1].split(',')[2].split('-')[1] : 0);
                    var CessPerc = parseFloat($('#divModelPopSaleOrder #CessPerc').val() != "" ? $('#divModelPopSaleOrder #CessPerc').val() : 0);
                    var taxableAmount = rate * qty - discount;
                    $('#divModelPopSaleOrder #hdnCGSTPerc').val(CGST);
                    $('#divModelPopSaleOrder #hdnSGSTPerc').val(SGST);
                    $('#divModelPopSaleOrder #hdnIGSTPerc').val(IGST);
                    
                    $('#divModelPopSaleOrder #CGSTPerc').val(taxableAmount * CGST / 100);
                    $('#divModelPopSaleOrder #SGSTPerc').val(taxableAmount * SGST / 100);
                    $('#divModelPopSaleOrder #IGSTPerc').val(taxableAmount * IGST / 100);
                    var TaxAmount = parseFloat(taxableAmount * CGST / 100) + parseFloat(taxableAmount * SGST / 100) + parseFloat(taxableAmount * IGST / 100)
                    $('#divModelPopSaleOrder #CessAmt').val((TaxAmount * CessPerc) / 100);
                });
            });
        </script>

