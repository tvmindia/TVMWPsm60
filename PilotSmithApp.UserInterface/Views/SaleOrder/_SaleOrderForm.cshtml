
@model PilotSmithApp.UserInterface.Models.SaleOrderViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateSaleOrder", "SaleOrder", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessSaleOrder", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "SaleOrderForm" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalStatus, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model =>model.ApproverLevel,htmlAttributes:new { @class=""})
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">
                @if (!Model.IsUpdate)
                {
                    <div class="col-md-12" style="font-size:14px">
                        @Html.Label("Create Document From: ")
                        <span style="margin-left:10px">
                            @Html.RadioButtonFor(model => model.DocumentType, "Quotation", new { @checked = true, @tabindex = "-1" }) @Html.Label("Quotation")
                        </span>
                        <span style="margin-left:10px">
                            @Html.RadioButtonFor(model => model.DocumentType, "Enquiry") @Html.Label("Enquiry")
                        </span>
                    </div>
                    if (Model.DocumentType == "Quotation")
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>

                        <div class="col-md-12 no-padding" id="divEnquirySelectList" style="display:none;">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Enquiry", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.EnquiryID, Model.EnquirySelectList, "Search Enquiry", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnEnquiryID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.EnquiryID, htmlAttributes: new { @class = "", @id = "hdnEnquiryID" })
                        </div>
                    }
                    if (Model.DocumentType == "Enquiry")
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList" style="display:none;">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>

                        <div class="col-md-12 no-padding" id="divEnquirySelectList">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Enquiry", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.EnquiryID, Model.EnquirySelectList, "Search Enquiry", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnEnquiryID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.EnquiryID, htmlAttributes: new { @class = "", @id = "hdnEnquiryID" })
                        </div>
                    }
                }
                else
                {
                    if (Model.QuoteID != null)
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList">
                            <div class="col-md-12">
                                @Html.Label("Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)", @disabled = "" })
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>
                    }
                    if (Model.EnquiryID != null)
                    {
                        <div class="col-md-12 no-padding" id="divEnquirySelectList">
                            <div class="col-md-12">
                                @Html.Label("Enquiry", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.EnquiryID, Model.EnquirySelectList, "Search Enquiry", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnEnquiryID').val(this.value)", @disabled = "" })
                            </div>
                            @Html.HiddenFor(model => model.EnquiryID, htmlAttributes: new { @class = "", @id = "hdnEnquiryID" })
                        </div>
                    }
                }
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SaleOrderNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.SaleOrderNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.SaleOrderNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SaleOrderDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.SaleOrderDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.SaleOrderDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.SaleOrderRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.SaleOrderRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.SaleOrderRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ExpectedDelvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ExpectedDelvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ExpectedDelvDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BankCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divBankSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnBankRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnBankdisabled", false)
                    @Html.HiddenFor(model => model.BankCode, htmlAttributes: new { @class = "", @id = "hdnBankCode" })
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentStatusSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnDocumentStatusRequired", "required")
                    @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ReferredByCode, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divReferredByCodeSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnReferredByRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnReferredBydisabled", false)
                    @Html.HiddenFor(model => model.ReferredByCode, htmlAttributes: new { @class = "", @id = "hdnReferredByCode" })
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPreparedBySelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPreparedByRequired", "")
                    @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnPreparedBy" })
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput"style="background-color:#eeeeee" >@Model.Branch.Description</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divBranchSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>                          
                        </div>
                    }
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnBranchRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnBranchdisabled", false)
                    @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                </div>

            </div>
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Document Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Email Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.EmailSentYN == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else if (Model.EmailSentYN == true)
                            {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Approval Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.SaleOrderNo" documentType="SOD" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Customer Details</div>
            <div class="form-group col-md-6">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate||Model.EnquiryID!=null||Model.QuoteID!=null)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput"style="background-color:#eeeeee" >@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                    }
                  
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
            </div>
            <div class="form-group col-md-12">
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.MailingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.MailingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.MailingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ShippingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.ShippingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                SaleOrder Details
                @if (Model.IsDocLocked || !Model.IsUpdate)
                {
                    if (Model.LatestApprovalStatus == 3 || Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == null)
                    {
                        <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                        <a class="btn btn-openid pull-right" onclick="AddSaleOrderDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                    else
                    {
                        <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                        <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                }
                else
                {
                    <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                    <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.OtherChargesDetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblSaleOrderDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:20%">Product</th>
                            <th style="width:15%">HSN Code</th>
                            <th style="width:5%">Quantity</th>
                            <th style="width:10%">Rate(₹)</th>
                            <th style="width:5%">Discount(₹)</th>
                            <th style="width:10%">Taxable(₹)</th>
                            <th style="width:10%">GST(₹)</th>
                            <th style="width:10%">Cess</th>
                            <th style="width:10%">Total(₹)</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="form-group col-md-7">
                <table id="tblSaleOrderOtherChargesDetailList" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:20%">Other Charge</th>
                            <th style="width:10%">SAC Code</th>
                            <th style="width:10%">Charge Amount(₹)</th>
                            <th style="width:10%">GST(₹)</th>
                            <th style="width:10%">Additional Tax(₹)</th>
                            <th style="width:10%">Total(₹)</th>
                            <th style="width:10%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>

            <div class="col-md-5" style="padding-right:1.5%">
                <table class="table dataTable no-footer DetailSummerybox">
                    <tbody>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblItemTotal">Total Taxable Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblItemTotal">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblTaxTotal">GST Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblTaxTotal">00.00</label>
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblCessAmount">Cess Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblCessAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Other Charge Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblOtherChargeAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Gross Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrossAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label " for="Discount">Cash Discount</label>
                            </td>
                            <td style="text-align: right;padding: 0px!important">
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control newinput ApplyCurrency Amount", onchange = "CalculateGrandTotal(this.value)", @onkeypress = "return isNumber(event)" } })
                            </td>
                        </tr>
                        <tr class="odd">
                            <td style="text-align: right">
                                <label class="control-label " for="lblGrandTotal">Grand Total</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrandTotal" style="font-weight: bold !important;">00.00</label>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Other Details</div>
            <div class="form-group col-md-12">
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PurchaseOrdNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.PurchaseOrdNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrdNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PurchaseOrdDateFormatted, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.PurchaseOrdDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.PurchaseOrdDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>

            <div class="form-group col-md-12">
                @*<div class="col-md-4 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.CarrierCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.Action("CarrierSelectList", "Carrier", new { required = "" })
                            @Html.HiddenFor(model => model.CarrierCode, htmlAttributes: new { @class = "", @id = "hdnCarrierCode" })
                        </div>
                    </div>*@
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.TermReferenceNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.TermReferenceNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.TermReferenceNo, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-4 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.AdvanceAmount, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.AdvanceAmount, new { htmlAttributes = new { @class = "form-control newinput Amount", @onkeypress = "return isNumber(event)" } })
                        @Html.ValidationMessageFor(model => model.AdvanceAmount, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Notes</div>

            <div class="form-group col-md-12">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Attachments</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateSaleOrder" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}
<script>
    $(document).ready(function () {
        try {
            $.validator.unobtrusive.parse("#SaleOrderForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('.divPreparedBySelectList').load('/Employee/PreparedBySelectList?required=' + $('#hdnPreparedByRequired').val())          
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=SOD&required=' + $('#hdnDocumentStatusRequired').val())
            $('.divReferredByCodeSelectList').load('/ReferencePerson/ReferencePersonSelectList?required=' + $('#hdnReferredByRequired').val())
            $('.divBankSelectList').load('/Bank/BankSelectList?required=' + $('#hdnBankRequired').val())
            @if (Model.IsUpdate||Model.EnquiryID!=null||Model.QuoteID!=null)
            {

            }
            else
            {
                <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () { });
            </text>
            }
             @if ((!Model.IsUpdate) && (Model.EnquiryID!=null||Model.QuoteID!=null))
             {
                 <text>
             $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
             });
                 </text>
             }
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#SaleOrderForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#SaleOrderForm #ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#SaleOrderForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#SaleOrderForm #ID').val();
                }


                FileObject.ParentType = "SaleOrder";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderGradeCode').select2({});
            $('#QuoteID').val($('#hdnQuoteID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnQuoteID').val());
            $('#SaleOrderForm #QuoteID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "Quotation/GetQuotationSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('#EnquiryID').val($('#hdnEnquiryID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnEnquiryID').val());
            $('#SaleOrderForm #EnquiryID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "Enquiry/GetEnquiryForSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('.select2').addClass('form-control newinput');


            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });

        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderForm #QuoteID').change(function () {
                OnServerCallBegin();
                $("#divSaleOrderForm").load("SaleOrder/SaleOrderForm?id=" + _emptyGuid + "&quoteID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#SaleOrderForm #hdnCustomerID').val(), function () {
                        $('#MailingAddress').val($('#hdnCustomerBillingAddress').val());
                        $('#ShippingAddress').val($('#hdnCustomerShippingAddress').val());
                    });
                    ClearCalculatedFields();
                    BindSaleOrderDetailList("00000000-0000-0000-0000-000000000000", false, true);
                    BindSaleOrderOtherChargesDetailList("00000000-0000-0000-0000-000000000000", true);
                    CalculateTotal();
                    debugger;
                    $("input[type=radio][value=Enquiry]").attr("disabled", true);
                    $("input[type=radio][value=Enquiry]").attr('title', "Quotation details has been listed, Reset to continue");
                    OnServerCallComplete();
                });

            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderForm #EnquiryID').change(function () {
                OnServerCallBegin();
                $("#divSaleOrderForm").load("SaleOrder/SaleOrderForm?id=" + _emptyGuid + "&enquiryID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#SaleOrderForm #hdnCustomerID').val());
                    debugger;
                    ClearCalculatedFields();
                    BindSaleOrderDetailList("00000000-0000-0000-0000-000000000000", true, false)
                    BindSaleOrderOtherChargesDetailList("00000000-0000-0000-0000-000000000000", false);
                    CalculateTotal();
                    $('#DocumentType').prop('disabled', true);
                    $("#DocumentType").attr('title', "Enquiry details has been listed, Reset to continue");
                    OnServerCallComplete();
                });

            });
        }
        catch (e) {
            console.log(e.message);
        }

        try {
            $('[name="DocumentType"]').change(function () {
                if (this.value == "Quotation") {
                    $('#divEnquirySelectList').hide();
                    $('#divQuotationSelectList').show();
                    $('#QuoteID').prop('disabled', false);
                    $('#EnquiryID').prop('disabled', true);
                }
                else if (this.value == "Enquiry") {
                    $('#divEnquirySelectList').show();
                    $('#divQuotationSelectList').hide();
                    $('#QuoteID').prop('disabled', true);
                    $('#EnquiryID').prop('disabled', false);
                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            if ($('#SaleOrderForm #IsDocLocked').val() == "False" && $('#SaleOrderForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

