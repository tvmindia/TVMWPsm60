@model PilotSmithApp.UserInterface.Models.DeliveryChallanDetailViewModel

@using (Ajax.BeginForm("", "", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "", OnFailure = "", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormDeliveryChallanDetail" }))
{
    @Html.HiddenFor(model => model.DelvChallanID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    <div class="form-group col-md-12 no-padding">
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divProductSelectList">
                    <span class="form-control"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("ProductSelectList", "Product", new { required = "required" })*@
                </div>               
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductRequired", "required")
            @Html.HiddenFor(model => model.ProductID, htmlAttributes: new { @class = "", @id = "hdnProductID" })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductModelID, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divProductModelSelectList">
                    <span class="form-control newinput"><i id="dropLoad" class=""></i></span>
                    @*@Html.Action("ProductModelSelectList", "ProductModel", new { required = "required" })*@
                </div>               
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnProductModelRequired", "required")
            @Html.HiddenFor(model => model.ProductModelID, htmlAttributes: new { @class = "", @id = "hdnProductModelID" })
        </div>
        <div id="divProductBasicInfo">
            @Html.Action("ProductBasicInfo", "Product", new { ID = Guid.Empty })
        </div>
        <div class="col-md-12 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.ProductSpec, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                @Html.TextAreaFor(model => model.ProductSpec, 4, 0, new { @class = "form-control newinput" })
                @Html.ValidationMessageFor(model => model.ProductSpec, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.OrderQty, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.OrderQty, new { htmlAttributes = new { @class = "form-control newinput Amount ", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.OrderQty, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.DelvQty, htmlAttributes: new { @class = "control-label " })
            </div>
            <div class="col-md-12">
                @Html.EditorFor(model => model.DelvQty, new { htmlAttributes = new { @class = "form-control newinput Amount ", @onkeypress = "return isNumber(event)" } })
                @Html.ValidationMessageFor(model => model.DelvQty, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="col-md-4 no-padding">
            <div class="col-md-12">
                @Html.LabelFor(model => model.UnitCode, htmlAttributes: new { @class = "control-label lblrequired" })
            </div>
            <div class="col-md-12">
                <div class="divUnitSelectList">
                    <span class="form-control"> <i class="fa fa-spinner fa-spin"> </i></span>
                    @*@Html.Action("UnitSelectList", "Unit", new { required = "required" })*@
                </div>                
            </div>
            <!-- This hidden field will keep the information whether the field is required or not -->
            @Html.Hidden("hdnUnitRequired", "required")
            <!-- This hidden field will keep the information whether the field is disabled or not -->
            @Html.Hidden("hdnUnitdisabled", false)
            @Html.HiddenFor(model => model.UnitCode, htmlAttributes: new { @class = "", @id = "hdnUnitCode" })
        </div>
    </div>
   
    <div class="modal-footer d-flex justify-content-center">
        <button class="btn btn-default" id="btnAddDeliveryChallanDetail" onclick="AddDeliveryChallanDetailToList()" style="margin-right:3%;margin-top:2%">Add Details <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
    </div>
}
<script>
    $(document).ready(function () {
        $.validator.unobtrusive.parse("#FormDeliveryChallanDetail");
        try {
            $('.divProductSelectList').load('/Product/ProductSelectList?required=' + $('#hdnProductRequired').val(), function () {
                $('#divModelPopDeliveryChallan #ProductID').change(function () {
                    if ($('#divProductBasicInfo') != undefined) {
                        $('#divModelPopDeliveryChallan #divProductBasicInfo').load("Product/ProductBasicInfo?ID=" + (this.value == "" ? '00000000-0000-0000-0000-000000000000' : this.value), function () {
                            $('#divModelPopDeliveryChallan #ProductSpec').val($('#divModelPopDeliveryChallan #spnProductName').text());
                        });
                    }
                    if ($('.divProductModelSelectList') != undefined) {
                        $('#dropLoad').addClass('fa fa-spinner fa-spin');
                        if (this.value != "") {
                            $('.divProductModelSelectList').load("ProductModel/ProductModelSelectList?required=" + $('hdnProductModelRequired').val() + "&productID=" + this.value)
                        }
                        else {
                            $('.divProductModelSelectList').empty();
                            $('.divProductModelSelectList').append('<span class="form-control newinput"><i id="dropLoad" class="fa fa-spinner"></i></span>');
                        }
                    }
                });
            });
            $('.divUnitSelectList').load('/Unit/UnitSelectList?required=' + $('#hdnUnitRequired').val())         
        }
        catch (e) {
            console.log(e.message);
        }
        $('#divModelPopDeliveryChallan #ProductID,#divModelPopDeliveryChallan #UnitCode,#divModelPopDeliveryChallan #ProductModelID').select2({
            dropdownParent: $("#divModelPopDeliveryChallan")
        });
        $('.select2').addClass('form-control newinput');
    });
</script>

                                                                                                
