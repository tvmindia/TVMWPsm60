@model PilotSmithApp.UserInterface.Models.ServiceCallViewModel
@{
    List<SelectListItem> TimeSelectList = new List<SelectListItem>();
    DateTime now = DateTime.Now;
    DateTime startTime = new DateTime(now.Year, now.Month, now.Day, 9, 0, 0);
    DateTime endTime = new DateTime(now.Year, now.Month, now.Day, 18, 0, 0);
    while (startTime <= endTime)
    {
        TimeSelectList.Add(new SelectListItem
        { Text = startTime.ToShortTimeString(), Value = startTime.ToShortTimeString(), Selected = false });
        startTime = startTime.AddMinutes(15);
    }
}
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateServiceCall", "ServiceCall", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessServiceCall", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "ServiceCallForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>

            <div class="form-group col-md-6 ">
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServiceCallNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ServiceCallNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                            @Html.ValidationMessageFor(model => model.ServiceCallNo, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServiceCallDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ServiceCallDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput" } })
                            @Html.ValidationMessageFor(model => model.ServiceCallDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput">@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                    }
                    
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>

                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServiceCallTimeFormatted, htmlAttributes: new { @class = "control-label " })
                        </div>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.ServiceCallTimeFormatted, TimeSelectList, "--Select Time--", new { @class = "form-control newinput", @style = "width:100%", @id = "ServiceCallTime" })
                            @Html.ValidationMessageFor(model => model.ServiceCallTimeFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.CalledPersonName, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.CalledPersonName, new { htmlAttributes = new { @class = "form-control newinput" } })
                            @Html.ValidationMessageFor(model => model.CalledPersonName, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    @*<div class="form-group col-md-12 ">*@
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.AttendedBy, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divAttendedBySelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnAttendedByRequired", "")
                        @Html.HiddenFor(model => model.AttendedBy, htmlAttributes: new { @class = "", @id = "hdnAttendedByID" })
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServicedBy, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divServicedBySelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnServicedByRequired", "")
                        @Html.HiddenFor(model => model.ServicedBy, htmlAttributes: new { @class = "", @id = "hdnServicedByID" })
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServiceDateFormatted, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ServiceDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput" } })
                            @Html.ValidationMessageFor(model => model.ServiceDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            <div class="divDocumentStatusSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnDocumentStatusRequired", "required")
                        @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12">
                                <span class="form-control newinput">@Model.Branch.Description</span>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <div class="divBranchSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                                </div>                               
                            </div>
                        }
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBranchRequired", "required")
                        <!-- This hidden field will keep the information whether the field is disabled or not -->
                        @Html.Hidden("hdnBranchdisabled", false)
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ServiceTypeCode, htmlAttributes: new { @class = "control-label " })
                        </div>
                        <div class="col-md-12">
                            <div class="divServiceTypeSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnServiceTypeRequired", "")
                        @Html.HiddenFor(model => model.ServiceTypeCode, htmlAttributes: new { @class = "", @id = "hdnServiceTypeCode" })
                    </div>
                </div>


                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReferenceInvoice, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ReferenceInvoice, new { htmlAttributes = new { @class = "form-control newinput" } })
                            @Html.ValidationMessageFor(model => model.ReferenceInvoice, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ReferenceInvoiceDateFormatted, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ReferenceInvoiceDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput", @id = "ReferenceInvoiceDate" } })
                            @Html.ValidationMessageFor(model => model.ReferenceInvoiceDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>

            </div>

            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Document Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Invoices</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay" id="lblTotalInvoices">_</div>
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.ServiceCallNo" documentType="SRC"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>

        </div>
    </div>
    <div class="col-md-12">&nbsp;</div>


    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                Service Call Details
                @{
                    if (Model.IsDocLocked || !Model.IsUpdate)
                    {
                        <a class="btn btn-openid pull-right" onclick="AddServiceCallDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Product Detail</a>
                        <a class="btn btn-openid pull-right" onclick="AddServiceCallDetailSpare()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Spare Detail</a>
                    }
                    else
                    {
                        <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Spare Detail</a>
                        <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Product Detail</a>
                    }
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblServiceCallDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:35%">Product</th>
                            <th style="width:15%">HSN Code</th>
                            <th style="width:15%">Guarantee</th>
                            <th style="width:15%">Installed Date</th>
                            <th style="width:15%">Service Status</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                Service Call Charges Details
                @{
                    if (Model.IsDocLocked || !Model.IsUpdate)
                    {
                        <a class="btn btn-openid pull-right" onclick="AddServiceCallChargeDetailList()" id="btnServiceCallCharge" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Service Call Charge</a>
                    }
                    else
                    {
                        <a class="btn btn-openid pull-right" disabled id="btnServiceCallCharge" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Service Call Charge</a>
                    }
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.CallChargeJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblServiceCallChargeDetailList" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:43%">Other Charge</th>
                            <th style="width:10%">SAC Code</th>
                            <th style="width:10%">Charge Amount(₹)</th>
                            <th style="width:10%">GST(₹)</th>
                            @*<th style="width:15%">Additional Tax(%)</th>*@
                            <th style="width:10%">Additional Tax(₹)</th>
                            <th style="width:10%">Total(₹)</th>
                            <th style="width:7%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="col-md-7">&nbsp;</div>
            <div class="col-md-5" style="padding-right:3.5%">
                <table class="table dataTable no-footer DetailSummerybox">
                    <tbody>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblTaxTotal">Total Additional Tax</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblAddlTaxTotal">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblTaxTotal">GST Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblTaxTotal">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Other Charge Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblOtherChargeAmount">00.00</label>
                            </td>
                        </tr>
                        <tr class="odd">
                            <td style="text-align: right">
                                <label class="control-label " for="lblGrandTotal">Grand Total</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrandTotal" style="font-weight: bold !important;">00.00</label>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Notes</div>

            <div class="form-group col-md-12">

                <div class="col-md-12 no-padding ">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ServiceComments, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.ServiceComments, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.ServiceComments, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-12 no-padding ">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Attachment</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateServiceCall" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
                    }

<script>
    $(document).ready(function () {
        try {

            $('.divAttendedBySelectList').load('/Employee/AttendedBySelectList?required=' + $('#hdnAttendedByRequired').val())
            $('.divServicedBySelectList').load('/Employee/ServicedBySelectList?required=' + $('#hdnServicedByRequired').val())
            @if (Model.IsUpdate) {
                  
            }
            else {
                 <text>
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () { });
            </text>
                     }
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=SRC&required=' + $('#hdnDocumentStatusRequired').val(), function () {
                $('#DocumentStatusCode').select2({
                    dropdownParent: $('#ServiceCallForm')
                });
                $('.select2').addClass('form-control newinput');
            })
            @if (Model.IsUpdate)
                    {
                        <text>
            
            $('#CustomerID').change(function () {
                debugger;
                $('#divModelInvoicesPopBody').load('/ServiceCall/GetSaleInvoiceByCustomerID?customerID=' + $('#CustomerID').val());
            });
            
            </text>
                    }
                    else
                    {
                        <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {
                $('#CustomerID').change(function () {
                    debugger;
                    $('#divModelInvoicesPopBody').load('/ServiceCall/GetSaleInvoiceByCustomerID?customerID=' + $('#CustomerID').val());
                });
            });
            </text>
                    }
            $('.divServiceTypeSelectList').load('/ServiceType/ServiceTypeSelectList?required=' + $('#hdnServiceTypeRequired').val())
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $.validator.unobtrusive.parse("#ServiceCallForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ID').val();
                }

                FileObject.ParentType = "ServiceCall";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#CustomerID,#BranchCode,#ServiceCallTime').select2({});

            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        //try {
        //    $('#ServiceCallForm #EnquiryID').change(function () {
        //        debugger;
        //        OnServerCallBegin();
        //        $('#divServiceCallForm').load("ServiceCall/ServiceCallForm?id=" + _emptyGuid + "&enquiryID=" + this.value, function () {
        //            $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#ServiceCallForm #hdnCustomerID').val());
        //            BindServiceCallChargeDetailList("00000000-0000-0000-0000-000000000000");
        //            BindServiceCallDetailList("00000000-0000-0000-0000-000000000000", true);
        //            OnServerCallComplete();
        //        });
        //    });
        //}
        //catch (e) {
        //    console.log(e.message);
        //}
        try {
            if ($('#ServiceCallForm #IsDocLocked').val() == "False" && $('#ServiceCallForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>
