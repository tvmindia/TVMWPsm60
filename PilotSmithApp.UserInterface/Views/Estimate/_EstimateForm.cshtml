@model PilotSmithApp.UserInterface.Models.EstimateViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateEstimate", "Estimate", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessEstimate", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "EstimateForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>

            <div class="form-group col-md-6 ">
                @if (!Model.IsUpdate)
                {
                    <div class="col-md-12 no-padding" id="divEnquirySelectList">
                        <div class="col-md-12">
                            @Html.Label("Search and select a Enquiry", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.EnquiryID, Model.EnquirySelectList, "Search Enquiry", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnEnquiryID').val(this.value)" })

                            @Html.ValidationMessageFor(model => model.EnquiryID, "", new { @class = "text-danger" })
                        </div>
                        @Html.HiddenFor(model => model.EnquiryID, htmlAttributes: new { @class = "", @id = "hdnEnquiryID" })
                    </div>
                }
                else
                {
                    if (Model.EnquiryID != null)
                    {
                        <div class="col-md-12 no-padding" id="divEnquirySelectList">
                            <div class="col-md-12">
                                @Html.Label("Enquiry", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                <div class="divEnquirySelectList">
                                    @*@Html.DropDownListFor(model => model.EnquiryID, Model.EnquirySelectList, "Search Enquiry", new { @class = "form-control newinput", @style = "width:100%!important", @disabled = "", @onchange = "$('#hdnEnquiryID').val(this.value)" })
                                        @Html.ValidationMessageFor(model => model.EnquiryID, "", new { @class = "text-danger" })*@
                                    <span class="form-control newinput" id="spanEnquiryID" style="background-color:#eeeeee"></span>
                                </div>
                            </div>
                            @Html.HiddenFor(model => model.EnquiryID, htmlAttributes: new { @class = "", @id = "hdnEnquiryID" })
                        </div>
                    }
                }

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EstimateNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EstimateNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.EstimateNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EstimateDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EstimateDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.EstimateDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.EstimateRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.EstimateRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.EstimateRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ValidUpToDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ValidUpToDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ValidUpToDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>


                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate || Model.EnquiryID != null)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput" style="background-color:#eeeeee">@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                    }
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>

                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divPreparedBySelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnPreparedByRequired", "")
                    @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnPreparedBy" })
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentStatusSelectList">
                            <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnDocumentStatusRequired", "required")
                    @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput" style="background-color:#eeeeee">@Model.Branch.Description</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divBranchSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                            </div>

                        </div>
                    }
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnBranchRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnBranchdisabled", false)
                    @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                </div>
            </div>

            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Document Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                                        <div class="form-group col-md-12">
                                            @if (!Model.IsDocLocked)
                                            {
                                                <div class="col-md-12 no-padding">
                                                    <div class="col-md-2 no-padding">
                                                        <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                                    </div>
                                                    <div class="col-md-10 no-padding">
                                                        <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                                        <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.EstimateNo" documentType="EST" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                                    </div>
                                                </div>
                                            }
                                            else
                                            {
                                                <div class="col-md-12 no-padding">
                                                    <div class="col-md-2 no-padding">
                                                        <img src="~/Content/images/ownerunlock.png" />
                                                    </div>
                                                    <div class="col-md-10 no-padding">
                                                        <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                                        <span style="font-size:18px;">Holding ownership</span>
                                                    </div>
                                                </div>
                                            }
                                        </div>
                        }

                    </div>

                </div>
            </div>

            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>

                <div class="col-md-11 divbox1">
                    <div class="col-md-12 divbox2">
                        <div class="col-md-12 headSeperator">
                            Estimate Details
                            @if (Model.IsDocLocked || !Model.IsUpdate)
                            {
                                <a class="btn btn-openid pull-right" onclick="AddEstimateDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else
                            {
                                <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }

                        </div>

                        @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
                        <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                            <table id="tblEstimateDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                                <thead>
                                    <tr class="text-center TableHead">
                                        <th>Product</th>
                                        <th>HSN Code</th>
                                        <th>Qty</th>
                                        <th>Cost Price(₹)</th>
                                        <th>Selling Price(₹)</th>
                                        <th>Drawing No</th>
                                        <th>Total Cost Price(₹)</th>
                                        <th>Total Selling Price(₹)</th>
                                        <th>...</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                    </div>
                </div>

                <div class="col-md-11 divbox1">
                    <div class="col-md-12 divbox2">
                        <div class="col-md-12 headSeperator">General Notes</div>

                        <div class="form-group col-md-12">

                            <div class="col-md-12 no-padding ">
                                <div class="col-md-12">
                                    @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                                </div>
                                <div class="col-md-12">
                                    @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                                    @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="col-md-12">&nbsp;</div>
                        </div>
                    </div>
                </div>

                <div class="col-md-11 divbox1">
                    <div class="col-md-12 divbox2">
                        <div class="col-md-12 headSeperator">Attachments</div>
                        @Html.Partial("_Fileupload")
                    </div>
                </div>
                <div class="" hidden="hidden">
                    <div class="col-md-offset-2 col-md-10">
                        <input id="btnInsertUpdateEstimate" type="submit" value="Create" class="btn btn-default" />
                    </div>
                </div>
}

<script>
    $(document).ready(function () {
        try {
            $.validator.unobtrusive.parse("#EstimateForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('.divPreparedBySelectList').load('/Employee/PreparedBySelectList?required=' + $('#hdnPreparedByRequired').val())
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=EST&required=' + $('#hdnDocumentStatusRequired').val())
            @if (Model.IsUpdate||Model.EnquiryID!=null)
            {

            }
            else
            {
                <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });          
            </text>
            }
            @if (!Model.IsUpdate&&Model.EnquiryID!=null)
             {
                <text>
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });
            </text>
             }
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ID').val();
                }

                FileObject.ParentType = "Estimate";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#CustomerID,#BranchCode').select2({});
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#EstimateForm #EnquiryID').change(function () {
                debugger;
                OnServerCallBegin();
                $('#divEstimateForm').load("Estimate/EstimateForm?id=" + _emptyGuid + "&enquiryID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#EstimateForm #hdnCustomerID').val());
                    BindEstimateDetailList("00000000-0000-0000-0000-000000000000", true);
                    OnServerCallComplete();
                });
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#EnquiryID').val($('#hdnEnquiryID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnEnquiryID').val());
            $('#EnquiryID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "Enquiry/GetEnquiryForSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            if ($('#EstimateForm #IsDocLocked').val() == "False" && $('#EstimateForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

