@model PilotSmithApp.UserInterface.Models.ApproverViewModel

@using (Ajax.BeginForm("InsertUpdateApprover", "Approver", null, new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessApprover", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnMasterBegin", OnComplete = "OnMasterComplete" }, new { @class = "form-horizontal", role = "form", id = "FormApprover" }))
{
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
        @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group col-md-12 no-padding">
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.DocumentTypeCode, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                <div class="col-md-12">
                    <div class="divDocumentTypeSelectList">
                        <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                    </div>
                </div>
                <!-- This hidden field will keep the information whether the field is required or not -->
                @Html.Hidden("hdnDocumentTypeRequired", "required")
                @Html.HiddenFor(model => model.DocumentTypeCode, htmlAttributes: new { @class = "", @id = "hdnDocumentTypeCode" })
                </div>
            </div>

        <div class="form-group col-md-12 no-padding">
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.Level, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.Level, new { htmlAttributes = new { @class = "form-control newinput", @min = "1", @max = "5" } })
                        @Html.ValidationMessageFor(model => model.Level, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        <div class="form-group col-md-12 no-padding">
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.LabelFor(model => model.UserID, htmlAttributes: new { @class = "control-label lblrequired" })
                </div>
                    <div class="col-md-12">
                        @Html.DropDownListFor(model => model.UserID, Model.PSAUser.UserSelectList, "--- Select user ---", new { @class = "form-control newinput", @style = "width:100%" })
                        @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>
        <div class="form-group col-md-12 no-padding">
            <div class="col-md-12 no-padding">
                <div class="col-md-12">
                    @Html.Label("email", htmlAttributes: new { @class = "control-label", hidden = "hidden", style = "color:green;" })
                </div>
            </div>
        </div>
        <div class="form-group col-md-12 no-padding">
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.HiddenFor(model => model.IsDefaultString, htmlAttributes: new { @class = "", @id = "hdnIsDefault" })
                        @Html.LabelFor(model => model.IsDefault, htmlAttributes: new { @class = "control-label" })
                        @Html.EditorFor(model => model.IsDefault, new { htmlAttributes = new { @class = "", @onchange = "SetDefaultValue()" } })
                        @Html.ValidationMessageFor(model => model.IsDefault, "", new { @class = "text-danger" })
                    </div>
                    </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.IsActive, htmlAttributes: new { @class = "control-label " })
                        @Html.EditorFor(model => model.IsActive, new { htmlAttributes = new { @class = "" } })
                        @Html.ValidationMessageFor(model => model.IsActive, "", new { @class = "text-danger" })
                    </div>
                    </div>
        </div>
        <div class="modal-footer d-flex justify-content-center">
            <button class="btn btn-default" type="submit" id="btnSaveMaster" style="margin-right:3%;margin-top:2%">Save Changes <i class="fa fa-spinner fa-spin" id="icnMasterLoading" style="display:none;"></i></button>
        </div>

}
        <script>
            $(document).ready(function () {
                $.validator.unobtrusive.parse("#FormApprover");
                $('.divDocumentTypeSelectList').load('/DocumentType/DocumentTypeSelectList?required=' + $('#hdnDocumentTypeRequired').val())
                $('#FormApprover #DocumentTypeCode,#FormApprover #UserID').select2({
                    dropdownParent: $("#FormApprover")
                });
                $('.select2').addClass('form-control newinput');
            //    $('#UserID').change(function () {
            //        debugger;
            //        GetEmailId(this.value)
            //    });
            });
            ////--Function To get emailid on user dropdown change--//
            //function GetEmailId(UserID) {
            //    debugger;
            //    var data = { "Id": UserID };
            //    var ds = {};
            //    ds = GetDataFromServer("User/GetUserDetailsByID/", data);
            //    if (ds != '') {
            //        ds = JSON.parse(ds);
            //        $('label[for="email"]').text(ds.Records.Email);
            //        $('label[for="email"]').show();
            //    }
            //    if (ds.Result == "OK") {
            //        return ds.Records;
            //    }

            //}

            //--Function To disable and enable checkbox corresponding to IsDefalut check box--//
            function SetDefaultValue() {
                debugger;
                if ($('#IsDefault').is(":checked")) {
                    $('#hdnIsDefault').val("true");
                }
                else {
                    $('#hdnIsDefault').val("false");
                }
            }
        </script>
