@model PilotSmithApp.UserInterface.Models.ProductionOrderViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateProductionOrder", "ProductionOrder", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProductionOrder", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "ProductionOrderForm" }))
{
    @Html.AntiForgeryToken()
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalStatus, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>

            <div class="form-group col-md-6 ">
                @if (!Model.IsUpdate)
                {
                    <div class="col-md-12 no-padding" id="divSaleOrderSelectList">
                        <div class="col-md-12">
                            @Html.Label("Search and select a Sale Order", htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search Sale Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)" })
                            @Html.ValidationMessageFor(model => model.SaleOrderID, "", new { @class = "text-danger" })
                        </div>
                        @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                    </div>
                }

                else
                {
                    if (Model.SaleOrderID != null)
                    {
                        <div class="col-md-12 no-padding" id="divSaleOrderSelectList">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Sale Order", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search Sale Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)" })
                                @Html.ValidationMessageFor(model => model.SaleOrderID, "", new { @class = "text-danger" })
                            </div>
                            @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                        </div>
                    }
                }


                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdOrderNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdOrderNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                        @Html.ValidationMessageFor(model => model.ProdOrderNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdOrderRefNo, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdOrderRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                        @Html.ValidationMessageFor(model => model.ProdOrderRefNo, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ProdOrderDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ProdOrderDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ProdOrderDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ExpectedDelvDateFormatted, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.EditorFor(model => model.ExpectedDelvDateFormatted, new { htmlAttributes = new { @class = "form-control datepicker newinput", @autocomplete = "off" } })
                        @Html.ValidationMessageFor(model => model.ExpectedDelvDateFormatted, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divEmployeeSelectList">
                            @Html.Action("PreparedBySelectList", "Employee", new { required = "" })
                        </div>
                        @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnPreparedBy" })
                    </div>
                </div>

                @*<div class="form-group col-md-12 ">*@

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    <div class="col-md-12">
                        <div class="divDocumentStatusSelectList">
                            @Html.Action("DocumentStatusSelectList", "DocumentStatus", new { required = "required", code = "POD" })
                        </div>
                        @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                    </div>
                </div>

                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        <div class="divCustomerSelectList">
                            @if (Model.IsUpdate || Model.SaleOrderID != null)
                            {
                                @Html.Action("CustomerSelectList", "Customer", new { required = "", disabled = true })
                            }
                            else
                            {
                                @Html.Action("CustomerSelectList", "Customer", new { required = "" })
                            }
                        </div>
                    </div>
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>

                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>

                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (!Model.IsDocLocked && Model.IsUpdate)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput">@Model.Branch.Description</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divBranchSelectList">
                                @Html.Action("BranchSelectList", "Branch", new { required = "required" })
                            </div>
                            @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                        </div>
                    }
                </div>

            </div>

            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Document Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                        </div>

                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Email Status</div>
                        </div>
                        <div class="form-group col-md-12">

                            @if (Model.EmailSentYN == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else if (Model.EmailSentYN == true)
                            {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                        </div>

                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus)</div>
                        </div>
                        <div class="form-group col-md-12">

                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>

                        @if (Model.IsUpdate)
                        {
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.BranchCode)</div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="lblStatusDisplay">@Model.Branch.Description</div>
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.BranchCode)</div>
                            </div>
                            <div class="form-group col-md-12">
                                <div class="lblStatusDisplay">-</div>
                            </div>
                        }


                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }

                    </div>

                </div>
            </div>



            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>


    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                ProductionOrder Details
                @if (Model.IsDocLocked || !Model.IsUpdate)
                {
                    if (Model.LatestApprovalStatus == 3 || Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == null)
                    {
                        <a class="btn btn-openid pull-right" onclick="AddProductionOrderDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                    else
                    {
                        <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                    }
                }
                else
                {
                    <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblProductionOrderDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th>Product</th>
                            <th>Sale Order.Qty</th>
                            <th>Prev Prod Order Qty</th>
                            <th>Curr Prod Order Qty</th>
                            <th>Produced Qty</th>
                            <th>Rate(₹)</th>
                            <th>Amount(₹)</th>
                            <th>Supplier/Plant</th>
                            <th>Milestone</th>
                            <th>...</th>
                        </tr>
                    </thead>
                </table>
            </div>
        </div>
    </div>


    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">GeneralNotes</div>

            <div class="form-group col-md-12">

                <div class="col-md-12 no-padding ">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>

    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Attachment</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateProductionOrder" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
}

<script>
    $(document).ready(function () {
        try {
            $.validator.unobtrusive.parse("#ProductionOrderForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('input.datepicker').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                debugger;
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ID').val();
                }

                FileObject.ParentType = "ProductionOrder";
                FileObject.Controller = "FileUpload";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#CustomerID,#BranchCode').select2({});
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProductionOrderForm #SaleOrderID').change(function () {
                debugger;
                OnServerCallBegin();
                $('#divProductionOrderForm').load("ProductionOrder/ProductionOrderForm?id=" + _emptyGuid + "&saleOrderID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#ProductionOrderForm #hdnCustomerID').val());
                    BindProductionOrderDetailList("00000000-0000-0000-0000-000000000000", true);
                    OnServerCallComplete();
                });
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#SaleOrderID').val($('#hdnSaleOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnSaleOrderID').val());
            $('#SaleOrderID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "SaleOrder/GetSaleOrderSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>

