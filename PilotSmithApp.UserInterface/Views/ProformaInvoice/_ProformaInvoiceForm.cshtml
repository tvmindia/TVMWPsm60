
@model PilotSmithApp.UserInterface.Models.ProformaInvoiceViewModel
<style>
    .todo-list > li {
        background: #ffffff;
        border-left: none;
    }
</style>
@using (Ajax.BeginForm("InsertUpdateProformaInvoice", "ProformaInvoice", new AjaxOptions { HttpMethod = "POST", Confirm = "", OnSuccess = "SaveSuccessProformaInvoice", OnFailure = "NetworkFailure", AllowCache = false, LoadingElementId = "", OnBegin = "OnServerCallBegin", OnComplete = "OnServerCallComplete" }, new { @class = "form-horizontal", role = "form", @id = "ProformaInvoiceForm" }))
{
    @*@Html.AntiForgeryToken()*@
    @Html.HiddenFor(model => model.IsUpdate, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.ID, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.IsDocLocked, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.hdnFileID, htmlAttributes: new { @class = "", @id = "hdnFileDupID", @value = Guid.Empty })
    @Html.HiddenFor(model => model.DocumentStatus.Description, htmlAttributes: new { @class = "", @id = "hdnDescription" })
    @Html.HiddenFor(model => model.LatestApprovalStatus, htmlAttributes: new { @class = "" })
    @Html.HiddenFor(model => model.LatestApprovalID, htmlAttributes: new { @class = "" })
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">General Details</div>
            <div class="form-group col-md-6">

                <!--Currency start-->
                <div class="col-md-12 no-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12" style="display:inline-flex">
                            @Html.HiddenFor(model => model.CurrencyCode, htmlAttributes: new { @class = "", @id = "hdnCurrencyCode" })
                            @Html.HiddenFor(model => model.CurrencyRate, htmlAttributes: new { @class = "", @id = "hdnCurrencyRate" })
                            @Html.Label("Select currency", htmlAttributes: new { @class = "control-label lblrequired" })
                            <label class="control-label lblrequired lblrate">Rate</label>
                        </div>
                        <div class="col-md-12 no-padding">
                            <div class="col-md-12" style="display:inline-flex;font-weight:500;">
                                @*<select class="form-control newinput" disabled>
                                        <option>INR</option>
                                    </select>
                                    <input class="form-control newinput" type="number" value="1" readonly style="width:100%;border-left:1px solid black;text-align:right;" />*@
                                @if (Model.IsUpdate)
                                {
                                    <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                        <option>@Model.CurrencyCode</option>
                                    </select>
                                    <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;border-bottom:none;text-align:right;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span>@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                    @*<input class="form-control newinput" type="number" value="@Model.CurrencyRate" readonly style="width:100%;text-align:left;min-width:70px;" title="Cannot change rate" />*@
                                    <input class="form-control newinput changeCurrency" type="number" min="0" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" value="@Model.CurrencyRate" />
                                }
                                else
                                {
                                    if ((Model.QuoteID == null && Model.SaleOrderID == null))
                                    {
                                        <select class="form-control newinput changeCurrency" style="width:100%;min-width:68px;">
                                            @{
                                                foreach (var cur in Model.Currency.CurrencyList)
                                                {
                                                    <option value="@cur.Code" title="@cur.Description">@cur.Code</option>
                                                }
                                            }

                                        </select>
                                        <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;text-align:right;border-bottom:none;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span id="lblCurrencyCode">@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                                }
                                                else
                                                {
                                                    <select class="form-control newinput" disabled title="Cannot change currency" style="width:100%;min-width:68px;">
                                                        <option>@Model.CurrencyCode</option>
                                                    </select>
                                                    <span class="form-control newinput" style="margin-left:auto;border-left:1px solid black;text-align:right;border-bottom:none;min-width:70px;"> &nbsp;1&nbsp;&nbsp;<span id="lblCurrencyCode">@Model.CurrencyCode</span>&nbsp;&nbsp;&nbsp;=&nbsp;&nbsp;</span>
                                                }

                                                <input class="form-control newinput changeCurrency" type="number" min="0" id="idCurRateForAutofocus" style="width:100%;text-align:left;min-width:70px;" value="@Model.CurrencyRate" />

                                                }
                                @*<select class="form-control newinput" disabled>
                                        <option>INR</option>
                                    </select>*@
                                <input class="form-control newinput" type="text" readonly style="width:100%;text-align:left;background-color:rgba(2, 166, 143, 0.06);border-bottom:none;min-width:45px;" value="INR" />
                            </div>
                        </div>
                    </div>
                    @if (!Model.IsUpdate)
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info" style="background-color:#e8b67f!important;padding: 5px 0px 6.5px 10px;margin:0px;border-left: 8px solid #e66911;color: #543131 !important">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Changing currency will reset document</p>
                                </div>
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                <div class="callout callout-info" style="background-color:#e8b67f!important;padding: 5px 0px 6.5px 10px;margin:0px;border-left: 8px solid #e66911;color: #543131 !important">
                                    <h4><i class="fa fa-info-circle"></i> note</h4>

                                    <p>Currency cannot change in edit mode</p>
                                </div>
                            </div>
                        </div>
                    }
                </div>

                <!--Currency end-->

                @if (!Model.IsUpdate)
                {
                    <div class="col-md-12" style="font-size:14px">
                        @Html.Label("Create Document From: ")
                        <span style="margin-left:10px">
                            @Html.RadioButtonFor(model => model.DocumentType, "Quotation", new { @checked = true, @tabindex = "-1", @id = "Quote" }) @Html.Label("Quotation")
                        </span>
                        <span style="margin-left:10px">
                            @Html.RadioButtonFor(model => model.DocumentType, "SaleOrder", new { @id = "Sale" }) @Html.Label("Sale Order")
                        </span>
                    </div>
                    if (Model.DocumentType == "Quotation")
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>
                        <div class="col-md-12 no-padding" id="divSaleOrderSelectList" style="display:none;">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Sale Order", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search Sale Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                        </div>
                    }
                    if (Model.DocumentType == "SaleOrder")
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList" style="display:none;">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>
                        <div class="col-md-12 no-padding" id="divSaleOrderSelectList">
                            <div class="col-md-12">
                                @Html.Label("Search and select a Sale Order", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search Sale Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)" })
                            </div>
                            @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                        </div>
                    }
                }
                else
                {
                    if (Model.QuoteID != null && Model.QuoteID != Guid.Empty)
                    {
                        <div class="col-md-12 no-padding" id="divQuotationSelectList">
                            <div class="col-md-12">
                                @Html.Label("Quotation", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @*@Html.DropDownListFor(model => model.QuoteID, Model.QuotationSelectList, "Search Quotation", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnQuoteID').val(this.value)", @disabled = "" })*@
                                <span class="form-control newinput" id="spanQuoteID" style="background-color:#eeeeee">@Model.Quotation.QuoteNo</span>
                            </div>
                            @Html.HiddenFor(model => model.QuoteID, htmlAttributes: new { @class = "", @id = "hdnQuoteID" })
                        </div>
                    }
                    if (Model.SaleOrderID != null && Model.SaleOrderID != Guid.Empty)
                    {
                        <div class="col-md-12 no-padding" id="divSaleOrderSelectList">
                            <div class="col-md-12">
                                @Html.Label("Sale Order", htmlAttributes: new { @class = "control-label" })
                            </div>
                            <div class="col-md-12">
                                @*@Html.DropDownListFor(model => model.SaleOrderID, Model.SaleOrderSelectList, "Search Sale Order", new { @class = "form-control newinput", @style = "width:100%!important", @onchange = "$('#hdnSaleOrderID').val(this.value)", @disabled = "" })*@
                                <span class="form-control newinput" id="spanSaleOrderID" style="background-color:#eeeeee">@Model.SaleOrder.SaleOrderNo</span>
                            </div>
                            @Html.HiddenFor(model => model.SaleOrderID, htmlAttributes: new { @class = "", @id = "hdnSaleOrderID" })
                        </div>
                    }
                }

                <div class="form-group col-md-12 no-right-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ProfInvNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ProfInvNo, new { htmlAttributes = new { @class = "form-control newinput", @readonly = "readonly", @placeholder = "<<Autogenerated>>" } })
                            @Html.ValidationMessageFor(model => model.ProfInvNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @if (Model.IsUpdate)
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ProfInvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.ProfInvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off", @data_toggle = "popover", @data_content = "Select date with in financial year", @data_placement = "top" } })
                                @Html.ValidationMessageFor(model => model.ProfInvDateFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.ProfInvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                @Html.EditorFor(model => model.ProfInvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                                @Html.ValidationMessageFor(model => model.ProfInvDateFormatted, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                </div>
                <div class="form-group col-md-12 no-right-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ProfInvRefNo, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ProfInvRefNo, new { htmlAttributes = new { @class = "form-control newinput" } })
                            @Html.ValidationMessageFor(model => model.ProfInvRefNo, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.ExpectedDelvDateFormatted, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        <div class="col-md-12">
                            @Html.EditorFor(model => model.ExpectedDelvDateFormatted, new { htmlAttributes = new { @class = "form-control newinput datepicker", @autocomplete = "off" } })
                            @Html.ValidationMessageFor(model => model.ExpectedDelvDateFormatted, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @*<div class="col-md-6 no-padding">
                            <div class="col-md-12">
                                @Html.LabelFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "control-label lblrequired" })
                            </div>
                            <div class="col-md-12">
                                <div class="divDocumentStatusSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>


                                </div>
                            </div>

                            @Html.Hidden("hdnDocumentStatusRequired", "required")
                            @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                        </div>*@
                </div>
                <div class="form-group col-md-12 no-right-padding">

                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.PreparedBy, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divPreparedBySelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                @* binding from javascript document ready function using div class *@
                                @*@Html.Action("AttendedBySelectList", "Employee", new { required = "", postingParams = "ResponsiblePersonID" })*@
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnPreparedByRequired", "")
                        @Html.HiddenFor(model => model.PreparedBy, htmlAttributes: new { @class = "", @id = "hdnPreparedBy" })
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BillLocationCode, htmlAttributes: new { @class = "control-label" })
                        </div>
                        <div class="col-md-12">
                            <div class="divBillLocationSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                            </div>
                        </div>
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBillLocationRequired", "")
                        @Html.HiddenFor(model => model.BillLocationCode, htmlAttributes: new { @class = "", @id = "hdnBillLocationCode" })
                    </div>
                </div>
                <div class="form-group col-md-12 no-right-padding">
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.BranchCode, htmlAttributes: new { @class = "control-label lblrequired" })
                        </div>
                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12">
                                <span class="form-control newinput" style="background-color:#eeeeee">@Model.Branch.Description</span>
                            </div>
                        }
                        else
                        {
                            <div class="col-md-12">
                                <div class="divBranchSelectList">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>

                                </div>
                            </div>
                        }
                        <!-- This hidden field will keep the information whether the field is required or not -->
                        @Html.Hidden("hdnBranchRequired", "required")
                        @Html.HiddenFor(model => model.BranchCode, htmlAttributes: new { @class = "", @id = "hdnBranchCode" })
                    </div>
                    <div class="col-md-6 no-padding">
                        <div class="col-md-12">
                            @Html.LabelFor(model => model.InvoiceType, htmlAttributes: new { @class = "control-label" })
                        </div>
                        @if (Model.IsUpdate)
                        {

                            <div class="col-md-12">
                                @{
                                    if (Model.InvoiceType == "RB")
                                    {
                                        <span class="form-control newinput" style="background-color:#eeeeee">Regular Bill</span>
                                    }
                                    else if (Model.InvoiceType == "SB")
                                    {
                                        <span class="form-control newinput" style="background-color:#eeeeee">Service Bill</span>
                                    }
                                }
                            </div>
                                    }
                                    else
                                    {

                                        <div class="col-md-12">
                                            <div id="divInvoiceType">
                                                @{
                                                    List<SelectListItem> TypeList = new List<SelectListItem>();
                                                    TypeList.Add(new SelectListItem
                                                    { Text = "Regular Bill", Value = "RB", Selected = true });
                                                    TypeList.Add(new SelectListItem
                                                    { Text = "Service Bill", Value = "SB" });
                                                }
                                                @Html.DropDownListFor(model => model.InvoiceType, TypeList, new { @class = "form-control newinput", value = -1, style = "padding:4px 12px;width:100 %", onchange = "InvoiceTypeOnChange(this.value)", })
                                            </div>
                                            <div id="divServiceBill">
                                            </div>
                                        </div>
                                                    }
                        @Html.HiddenFor(model => model.InvoiceType, htmlAttributes: new { @class = "", @id = "hdnInvoiceType" })


                    </div>
                </div>



            </div>
            <div class="form-group col-md-6 stausCombined">
                <div class="boxstatus boxstatus2 shadow2">
                    <div class="Shadow2data clearfix">

                        @*<div class="form-group col-md-12">
                                <div class="lblStatusDisplay">@Model.DocumentStatus.Description</div>
                            </div>*@
                        @if (Model.IsUpdate)
                        {
                            <div class="form-group col-md-12">
                                <div class="rightAmtCaption">Document Status</div>
                            </div>
                            @*<div class="form-group col-md-12">
                                    <label class="switch switch-flat">
                                        <input class="switch-input" type="checkbox" checked />
                                        <span class="switch-label" data-on="Open" data-off="Closed"></span>
                                        <span class="switch-handle"></span>
                                    </label>
                                </div>*@
                        if (Model.IsDocLocked)
                        {
                            <div class="form-group col-md-4">
                                <div class="divDocumentStatusSelectList doc-status">
                                    <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                </div>
                                @Html.Hidden("hdnDocumentStatusRequired", "required")
                                @Html.HiddenFor(model => model.DocumentStatusCode, htmlAttributes: new { @class = "", @id = "hdnDocumentStatusCode" })
                            </div>
                        }
                        else
                        {
                            <div class="form-group col-md-4">
                                <span class="form-control newinput" style="border-radius: 4px!important;background-color:#eeeeee;color:black;text-align:center;" title="Document Locked">@Model.DocumentStatus.Description</span>
                            </div>
                            }
                        }
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Email Status</div>
                        </div>
                        <div class="form-group col-md-12">
                            @if (Model.EmailSentYN == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else if (Model.EmailSentYN == true)
                            {
                                <div class="lblStatusDisplay">✔ EMAIL SEND</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">EMAIL NOT SEND</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">@Html.DisplayNameFor(Model => Model.LatestApprovalStatus)</div>
                        </div>
                        <div class="form-group col-md-12">

                            @if (Model.LatestApprovalStatus == null)
                            {
                                <div class="lblStatusDisplay">-</div>
                            }
                            else
                            {
                                <div class="lblStatusDisplay">@Model.LatestApprovalStatusDescription</div>
                            }
                        </div>
                        <div class="form-group col-md-12">
                            <div class="rightAmtCaption">Branch</div>
                        </div>
                        <div class="form-group col-md-12">
                            <div class="lblStatusDisplay">@Model.Branch.Description</div>
                        </div>

                        @if (Model.IsUpdate)
                        {
                            <div class="col-md-12"></div>
                            <div class="form-group col-md-12">
                                @if (!Model.IsDocLocked)
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerlock.png" title="Document Locked" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <a href="#" onclick="TakeOwnership(this)" documentNumber="@Model.ProfInvNo" documentType="PIV" documentCurrentOwner="@Model.DocumentOwner"><span style="font-size:18px;">Take ownership</span></a>
                                        </div>
                                    </div>
                                }
                                else
                                {
                                    <div class="col-md-12 no-padding">
                                        <div class="col-md-2 no-padding">
                                            <img src="~/Content/images/ownerunlock.png" />
                                        </div>
                                        <div class="col-md-10 no-padding">
                                            <span style="font-size:24px;">Owner - <span style="font-weight:300;">@Model.DocumentOwner</span></span><br />
                                            <span style="font-size:18px;">Holding ownership</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    </div>

                </div>
            </div>
            <div class="col-md-12">&nbsp;</div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Customer Details</div>
            <div class="form-group col-md-6">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.CustomerID, htmlAttributes: new { @class = "control-label lblrequired" })
                    </div>
                    @if (Model.IsUpdate || Model.QuoteID != null || Model.SaleOrderID != null)
                    {
                        <div class="col-md-12">
                            <span class="form-control newinput" style="background-color:#eeeeee">@Model.Customer.CompanyName</span>
                        </div>
                    }
                    else
                    {
                        <div class="col-md-12">
                            <div class="divCustomerSelectList">
                                <span class="form-control newinput"> <i class="fa fa-spinner fa-spin"> </i></span>
                                @* binding from javascript document ready function using div class *@
                            </div>
                        </div>
                    }
                    <!-- This hidden field will keep the information whether the field is required or not -->
                    @Html.Hidden("hdnCustomerRequired", "required")
                    <!-- This hidden field will keep the information whether the field is disabled or not -->
                    @Html.Hidden("hdnCustomerdisabled", false)
                    @Html.HiddenFor(model => model.CustomerID, htmlAttributes: new { @class = "", @id = "hdnCustomerID" })
                </div>
                <div id="divCustomerBasicInfo">
                    @Html.Action("CustomerBasicInfo", "Customer", Model.Customer)
                </div>
            </div>
            <div class="form-group col-md-12">
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.MailingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.MailingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.MailingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-6 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.ShippingAddress, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.ShippingAddress, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.ShippingAddress, "", new { @class = "text-danger" })
                    </div>
                </div>
            </div>

        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">
                Proforma Invoice Details
                @{
                    if (Model.IsDocLocked || !Model.IsUpdate)
                    {
                        if (Model.InvoiceType == "SB")
                        {
                            if (Model.LatestApprovalStatus == 3 || Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == null || (Model.LatestApprovalStatus == 1 && Model.IsDocumentApprover == true) || (Model.LatestApprovalStatus == 9 && Model.IsDocumentApprover == true))
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="display:none;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else if ((Model.LatestApprovalStatus == 1 && Model.IsDocumentApprover == true) || (Model.LatestApprovalStatus == 9 && Model.IsDocumentApprover == true))
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="display:none;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else
                            {
                                <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="display:none;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" disabled id="btnAddServiceBill" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            @*<a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="display:none;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>*@

                        }
                        else
                        {
                            if (Model.LatestApprovalStatus == 3 || Model.LatestApprovalStatus == 0 || Model.LatestApprovalStatus == null || (Model.LatestApprovalStatus == 1 && Model.IsDocumentApprover == true) || (Model.LatestApprovalStatus == 9 && Model.IsDocumentApprover == true))
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else if ((Model.LatestApprovalStatus == 1 && Model.IsDocumentApprover == true) || (Model.LatestApprovalStatus == 9 && Model.IsDocumentApprover == true))
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else
                            {
                                <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" disabled id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            @*<a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>*@

                        }
                    }
                    else
                    {
                        if ((Model.LatestApprovalStatus == 1 && Model.IsDocumentApprover == true) || (Model.LatestApprovalStatus == 9 && Model.IsDocumentApprover == true))
                        {
                            if (Model.InvoiceType == "SB")
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="display:none;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                            else
                            {
                                <a class="btn btn-openid pull-right" onclick="AddOtherExpenseDetailList()" id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceDetailList()" id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                                <a class="btn btn-openid pull-right" onclick="AddProformaInvoiceServiceBillList()" id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            }
                        }
                        else
                        {
                            <a class="btn btn-openid pull-right" disabled id="btnAddOtherExpenses" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Other Expenses</a>
                            <a class="btn btn-openid pull-right" disabled id="btnAddItems" style="color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                            <a class="btn btn-openid pull-right" disabled id="btnAddServiceBill" style="display:none ;color:white;font-weight:bold;margin-bottom:.9%;text-decoration:none;margin-right: 2.7%;"><i class="fa fa-plus-circle"></i> Add Detail</a>
                        }
                    }
                }
            </div>

            @Html.HiddenFor(model => model.DetailJSON, htmlAttributes: new { @class = "" })
            @Html.HiddenFor(model => model.OtherChargesDetailJSON, htmlAttributes: new { @class = "" })
            <div class="col-md-12 no-left-padding" style="padding-right:3.7%">
                <table id="tblProformaInvoiceDetails" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                    <thead>
                        <tr class="text-center TableHead">
                            <th style="width:2%">Sl.No</th>
                            <th style="width:15%">Product</th>
                            <th style="width:10%">HSN Code</th>
                            <th style="width:10%">Quantity</th>
                            <th style="width:10%">Rate(<span id="spanRate">@Model.CurrencyCode</span>)</th>
                            <th style="width:10%">Discount(<span id="spanDiscount">@Model.CurrencyCode</span>)</th>
                            <th style="width:10%">Taxable(<span id="spanTaxable">@Model.CurrencyCode</span>)</th>
                            <th style="width:10%">GST</th>
                            <th style="width:10%">Cess</th>
                            <th style="width:10%">Total(<span id="spanTotal">@Model.CurrencyCode</span>)</th>
                            <th style="width:5%">...</th>
                        </tr>
                    </thead>
                </table>
            </div>
            <div class="form-group col-md-7">
                <div class="col-md-12 no-padding" id="divProformaInvoiceOtherChargesDetailList">
                    <table id="tblProformaInvoiceOtherChargesDetailList" class="table table-striped table-bordered table-hover customgrd" cellspacing="0" style="width:100%;">
                        <thead>
                            <tr class="text-center TableHead">
                                <th style="width:2%">Sl.No</th>
                                <th style="width:20%">Other Charge</th>
                                <th style="width:15%">SAC Code</th>
                                <th style="width:15%">Charge Amount(<span id="spanchargeAmount">@Model.CurrencyCode</span>)</th>
                                <th style="width:15%">GST</th>
                                <th style="width:15%">Additional Tax</th>
                                <th style="width:15%">Total(<span id="spanOCTotal">@Model.CurrencyCode</span>)</th>
                                <th style="width:5%">...</th>
                            </tr>
                        </thead>
                    </table>
                </div>
            </div>
            <div class="col-md-5" style="padding-right:1.5%;">
                <table class="table dataTable no-footer DetailSummerybox">
                    <tbody>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblItemTotal">Total Taxable Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblItemTotal">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblTaxTotal">GST Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblTaxTotal">00.00</label>
                            </td>
                        </tr>

                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblCessAmount">Cess Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblCessAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Other Charge Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblOtherChargeAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label" for="lblGrossAmount">Gross Amount</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrossAmount">00.00</label>
                            </td>
                        </tr>
                        <tr>
                            <td style="text-align: right">
                                <label class="control-label " for="Discount">Cash Discount</label>
                            </td>
                            <td style="text-align: right;padding: 0px!important">
                                @Html.EditorFor(model => model.Discount, new { htmlAttributes = new { @class = "form-control newinput ApplyCurrency Amount", onchange = "CalculateGrandTotal(this.value)", @onkeypress = "return isNumber(event)" } })
                            </td>
                        </tr>
                        <tr class="odd">
                            <td style="text-align: right">
                                <label class="control-label " for="lblGrandTotal">Grand Total</label>
                            </td>
                            <td class="ApplyCurrency" style="text-align: right">
                                <label class="control-label " for="" id="lblGrandTotal" style="font-weight: bold !important;">00.00</label>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Notes</div>

            <div class="form-group col-md-12">
                <div class="col-md-12 no-padding">
                    <div class="col-md-12">
                        @Html.LabelFor(model => model.GeneralNotes, htmlAttributes: new { @class = "control-label" })
                    </div>
                    <div class="col-md-12">
                        @Html.TextAreaFor(model => model.GeneralNotes, 5, 0, new { @class = "form-control newinput" })
                        @Html.ValidationMessageFor(model => model.GeneralNotes, "", new { @class = "text-danger" })
                    </div>
                </div>
                <div class="col-md-12">&nbsp;</div>
            </div>
        </div>
    </div>
    <div class="col-md-11 divbox1">
        <div class="col-md-12 divbox2">
            <div class="col-md-12 headSeperator">Proforma Invoice Attachments</div>
            @Html.Partial("_Fileupload")
        </div>
    </div>
    <div class="" hidden="hidden">
        <div class="col-md-offset-2 col-md-10">
            <input id="btnInsertUpdateProformaInvoice" type="submit" value="Create" class="btn btn-default" />
        </div>
    </div>
                    }
<script>
    $(document).ready(function () {
        $('[data-toggle="popover"]').popover({
        });
        try {

            debugger;
            //$('.switch-input').on('change', function () {
            //    debugger;
            //    var isChecked = $(this).is(':checked');
            //    var selectedData;
            //    var $switchLabel = $('.switch-label');
            //    console.log('isChecked: ' + isChecked);

            //    if (isChecked) {
            //        selectedData = $switchLabel.attr('data-on');

            //    } else {
            //        selectedData = $switchLabel.attr('data-off');
            //    }

            //    $.get("DocumentStatus/CloseDocument/?id=" + $('#ProformaInvoiceForm #ID').val() + "&doctype=PIV" + "&docstatus=" + selectedData, function (data) {
            //        debugger;
            //        // var JsonResult = JSON.parse(data)
            //        if (data == "1") {
            //            //   $('#anchorOpenSODInTab').trigger('click');
            //            BindOrReloadProformaInvoiceTable();
            //           // notyAlert('success', "Document status changed successfully!");
            //        }
            //        else {
            //            notyAlert('error', "Failed to change document status!");

            //            //  alert("Quotation not exist!");
            //        }

            //    });


            //  //  console.log('Selected data: ' + selectedData);
            //  //  alert(selectedData);
            //});


        }
        catch (e) {

        }
        try {
            $('.divPreparedBySelectList').load('/Employee/PreparedBySelectList')
            $('.divDocumentStatusSelectList').load('/DocumentStatus/DocumentStatusSelectList?code=PIV&required=' + $('#hdnDocumentStatusRequired').val(), function (responseTxt, statusTxt, xhr) {
                $('#DocumentStatusCode').change(function () {
                    StatusChange();
                });
            });
            function StatusChange() {
                var selectedData = $("#DocumentStatusCode option:selected").text();
                $.get("DocumentStatus/CloseDocument/?id=" + $('#ProformaInvoiceForm #ID').val() + "&doctype=PIV" + "&docstatus=" + selectedData, function (data) {
                    debugger;

                    if (data == "1") {
                        BindOrReloadProformaInvoiceTable();
                        //notyAlert('success', "Document status changed successfully!");
                    }
                    else {
                        notyAlert('error', "Failed to change document status!");
                    }

                });
            }
            $('.divBillLocationSelectList').load('/BillLocation/BillLocationSelectList?required=')
            @if (Model.IsUpdate||Model.QuoteID!=null||Model.SaleOrderID!=null)
         {
                <text>
            if ($('#hdnCurrencyCode').val() == "INR") {
                $('#idCurRateForAutofocus').prop("disabled", true)
            }

            $('.changeCurrency').change(function () {
                if (this.nodeName == "INPUT") {
                    $('#hdnCurrencyRate').val(this.value)
                }
            });
            var profInvDate = $('#ProfInvDateFormatted').val();
            if (profInvDate != "") {
                function getCurrentFinancialYear(profInvDate) {
                    debugger;
                    var startYear = "";
                    var endYear = "";
                    var docDate = new Date(profInvDate);
                    if ((docDate.getMonth() + 1) <= 3) {
                        startYear = docDate.getFullYear() - 1;
                        endYear = docDate.getFullYear();
                    }
                    else {
                        startYear = docDate.getFullYear();
                        endYear = docDate.getFullYear() + 1;
                    }
                    return { startDate: "01-Apr-" + startYear, endDate: "31-Mar-" + endYear };
                }
                $('#ProfInvDateFormatted').datepicker({
                    format: "dd-M-yyyy",
                    maxViewMode: 0,
                    todayBtn: "linked",
                    clearBtn: true,
                    autoclose: true,
                    todayHighlight: true,
                    startDate: getCurrentFinancialYear(profInvDate).startDate,
                    endDate: getCurrentFinancialYear(profInvDate).endDate
                });
            }
            </text>
         }
         else
         {
             <text>
            $('.divCustomerSelectList').load('/Customer/CustomerSelectList?required=' + $('#hdnCustomerRequired').val(), function () {

            });
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () { });

            $('.changeCurrency').change(function () {
                if (_dataTable.ProformaInvoiceDetailList.rows().count() > 0) {
                    notyConfirm('Do you want to continue?', 'ClearProformaInvoiceform();', 'This will reset the form !', "Continue");
                    return false;
                }
                if (this.nodeName == "SELECT") {
                    $('#hdnCurrencyCode').val(this.value)
                    if (this.value != "INR") {
                        $('#idCurRateForAutofocus').prop("disabled", false)
                    }
                    $('#spanRate').text(this.value)
                    $('#spanDiscound').text(this.value)
                    $('#spanTaxable').text(this.value)
                    $('#spanTotal').text(this.value)
                    $('#spanchargeAmount').text(this.value)
                    $('#spanOCTotal').text(this.value)
                    $('#idCurRateForAutofocus').focus();
                    $('#idCurRateForAutofocus').val(1);
                    $('#hdnCurrencyRate').val(1);
                }
                if (this.nodeName == "INPUT") {
                    $('#hdnCurrencyRate').val(this.value)
                }
            });
            if ($('#hdnCurrencyCode').val() == "INR") {
                $('#idCurRateForAutofocus').prop("disabled", true)
            }
            </text>
         }
            @if ((!Model.IsUpdate) && (Model.QuoteID!=null||Model.SaleOrderID!=null))
        {
            <text>
            $('.divBranchSelectList').load('/Branch/BranchSelectList?required=' + $('#hdnBranchRequired').val(), function () {
            });

            $('.changeCurrency').change(function () {
                debugger;
                if (this.nodeName == "INPUT") {
                    $('#hdnCurrencyRate').val(this.value)
                }
            });

            </text>
        }
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $.validator.unobtrusive.parse("#ProformaInvoiceForm");
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProfInvDateFormatted,#ExpectedDelvDateFormatted').datepicker({
                format: "dd-M-yyyy",
                maxViewMode: 0,
                todayBtn: "linked",
                clearBtn: true,
                autoclose: true,
                todayHighlight: true
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            //Fileupload
            $('#btnUpload').click(function () {
                //Pass the controller name
                var FileObject = new Object;
                if ($('#hdnFileDupID').val() != "00000000-0000-0000-0000-000000000000") {
                    FileObject.ParentID = (($('#ProformaInvoiceForm #ID').val()) != "00000000-0000-0000-0000-000000000000" ? ($('#ProformaInvoiceForm #ID').val()) : $('#hdnFileDupID').val());
                }
                else {
                    FileObject.ParentID = ($('#ProformaInvoiceForm #ID').val() == "00000000-0000-0000-0000-000000000000") ? "" : $('#ProformaInvoiceForm #ID').val();
                }
                FileObject.ParentType = "ProformaInvoice";
                FileObject.Controller = "FileUpload";
                if ($('#LatestApprovalStatus').val() == '1' || $('#LatestApprovalStatus').val() == '9')
                    FileObject.IsDocumentApprover = "True";
                UploadFile(FileObject);
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#QuoteID').val($('#hdnQuoteID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnQuoteID').val());
            $('#QuoteID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "Quotation/GetQuotationSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('#SaleOrderID').val($('#hdnSaleOrderID').val() == "00000000-0000-0000-0000-000000000000" ? null : $('#hdnSaleOrderID').val());
            $('#SaleOrderID').select2({
                language: {
                    noResults: function (params) {
                        return "Search result will shows here";
                    }
                },
                ajax: {
                    type: 'POST',
                    dataType: 'json',
                    url: "SaleOrder/GetSaleOrderSelectListOnDemand/",
                    delay: 250,
                    data: function (term) {
                        return {
                            'searchTerm': term.term //search term
                        };
                    },
                    processResults: function (data) {
                        return {
                            results: data.items
                        };
                    },
                }
            });
            $('.select2').addClass('form-control newinput');


            $(document).on('focus', '.select2', function (e) {
                if (e.originalEvent) {
                    var s2element = $(this).siblings('select');
                    s2element.select2('open');
                    // Set focus back to select2 element on closing.
                    s2element.on('select2:closing', function (e) {
                        s2element.select2('focus');
                    });
                }
            });

            $(document).on("select2-open", function () {
                $(this).select2('positionDropdown', true);
            });

        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProformaInvoiceForm #SaleOrderID').change(function () {
                debugger;
                OnServerCallBegin();
                $("#divProformaInvoiceForm").load("ProformaInvoice/ProformaInvoiceForm?id=" + _emptyGuid + "&saleOrderID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#ProformaInvoiceForm #hdnCustomerID').val(), function () {
                        $('#MailingAddress').val($('#hdnCustomerBillingAddress').val());
                        $('#ShippingAddress').val($('#hdnCustomerShippingAddress').val());
                    });
                    BindProformaInvoiceDetailList("00000000-0000-0000-0000-000000000000", true, false);
                    BindProformaInvoiceOtherChargesDetailList("00000000-0000-0000-0000-000000000000", false, true)
                    CalculateTotal();
                    // $('#DocumentType').prop('disabled', true);
                    // $("#DocumentType").attr('title', "SaleOrder details has been listed, Reset to continue");
                    OnServerCallComplete();
                });
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#ProformaInvoiceForm #QuoteID').change(function () {
                debugger;
                OnServerCallBegin();
                $("#divProformaInvoiceForm").load("ProformaInvoice/ProformaInvoiceForm?id=" + _emptyGuid + "&quotationID=" + this.value, function () {
                    $('#divCustomerBasicInfo').load("Customer/CustomerBasicInfo?ID=" + $('#ProformaInvoiceForm #hdnCustomerID').val(), function () {
                        $('#MailingAddress').val($('#hdnCustomerBillingAddress').val());
                        $('#ShippingAddress').val($('#hdnCustomerShippingAddress').val());
                    });
                    BindProformaInvoiceDetailList("00000000-0000-0000-0000-000000000000", false, true);
                    BindProformaInvoiceOtherChargesDetailList("00000000-0000-0000-0000-000000000000", true, false)
                    CalculateTotal();
                    // $("input[type=radio][value=SaleOrder]").attr("disabled", true);
                    // $("input[type=radio][value=SaleOrder]").attr('title', "Quotation  details has been listed, Reset to continue");
                    OnServerCallComplete();
                });
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('[name="DocumentType"]').change(function () {
                if (this.value == "Quotation") {
                    ResetProformaInvoice(this);
                    //$('#divSaleOrderSelectList').hide();
                    //$('#divQuotationSelectList').show();
                    //$('#QuoteID').prop('disabled', false);
                    //$('#SaleOrderID').prop('disabled', true);

                }
                else if (this.value == "SaleOrder") {
                    ResetProformaInvoice(this);
                    //$('#divSaleOrderSelectList').show();
                    //$('#divQuotationSelectList').hide();
                    //$('#QuoteID').prop('disabled', true);
                    //$('#SaleOrderID').prop('disabled', false);

                }
            });
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            $('#InvoiceType').select2({

            });
            $('.select2').addClass('form-control newinput');
        }
        catch (e) {
            console.log(e.message);
        }
        try {
            if (($('#ProformaInvoiceForm #IsDocLocked').val() == "False" && $("#hdnIsDocumentApprover").val() == "False") && $('#ProformaInvoiceForm #IsUpdate').val() == "True") {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
            if ($('#ProformaInvoiceForm #IsDocLocked').val() == "False" && $('#ProformaInvoiceForm #IsUpdate').val() == "True" && $('#LatestApprovalStatus').val() == '0') {
                $('#btnUpload').attr("disabled", "disabled")
                $('#btnUpload').attr("title", "Document Locked");
                $('#btnUpload').prop("onclick", null);
                $('#btnUpload').css("background", "#b2aca4");
                $('#btnCancel').attr("disabled", "disabled")
                $('#btnCancel').attr("title", "Document Locked");
                $('#btnCancel').prop("onclick", null);
                $('#btnCancel').css("background", "#b2aca4");
                $('#btnSelect').attr("disabled", "disabled")
                $('#btnSelect').attr("title", "Document Locked");
                $('#btnSelect').prop("onclick", null);
                $('#btnSelect').css("background", "#b2aca4");
            }
            if (($('#ProformaInvoiceForm #IsDocLocked').val() == "True" && $("#hdnIsDocumentApprover").val() == "False") && $('#ProformaInvoiceForm #IsUpdate').val() == "True") {
                if ($('#LatestApprovalStatus').val() != '3' && $('#LatestApprovalStatus').val() != '7' && $('#LatestApprovalStatus').val() != '0') {
                    $('#btnUpload').attr("disabled", "disabled")
                    $('#btnUpload').attr("title", "Document Locked");
                    $('#btnUpload').prop("onclick", null);
                    $('#btnUpload').css("background", "#b2aca4");
                    $('#btnCancel').attr("disabled", "disabled")
                    $('#btnCancel').attr("title", "Document Locked");
                    $('#btnCancel').prop("onclick", null);
                    $('#btnCancel').css("background", "#b2aca4");
                    $('#btnSelect').attr("disabled", "disabled")
                    $('#btnSelect').attr("title", "Document Locked");
                    $('#btnSelect').prop("onclick", null);
                    $('#btnSelect').css("background", "#b2aca4");
                }
            }
            debugger;
            if ($('#LatestApprovalStatus').val() != '0' && $('#LatestApprovalStatus').val() != "") {
                if (($("#hdnIsDocumentApprover").val() == "False" && ($('#LatestApprovalStatus').val() != '9' && ($('#LatestApprovalStatus').val() != '3' && ($('#LatestApprovalStatus').val() != '7' && $('#LatestApprovalStatus').val() != ""))))) {
                    $('#btnUpload').attr("disabled", "disabled")
                    $('#btnUpload').attr("title", "Document Locked");
                    $('#btnUpload').prop("onclick", null);
                    $('#btnUpload').css("background", "#b2aca4");
                    $('#btnCancel').attr("disabled", "disabled")
                    $('#btnCancel').attr("title", "Document Locked");
                    $('#btnCancel').prop("onclick", null);
                    $('#btnCancel').css("background", "#b2aca4");
                    $('#btnSelect').attr("disabled", "disabled")
                    $('#btnSelect').attr("title", "Document Locked");
                    $('#btnSelect').prop("onclick", null);
                    $('#btnSelect').css("background", "#b2aca4");
                }
                if ($("#hdnIsDocumentApprover").val() == "True" && $('#ProformaInvoiceForm #IsDocLocked').val() != "True" && ($('#LatestApprovalStatus').val() == '3' || $('#LatestApprovalStatus').val() == '7')) {
                    $('#btnUpload').attr("disabled", "disabled")
                    $('#btnUpload').attr("title", "Document Approved");
                    $('#btnUpload').prop("onclick", null);
                    $('#btnUpload').css("background", "#b2aca4");
                    $('#btnCancel').attr("disabled", "disabled")
                    $('#btnCancel').attr("title", "Document Approved");
                    $('#btnCancel').prop("onclick", null);
                    $('#btnCancel').css("background", "#b2aca4");
                    $('#btnSelect').attr("disabled", "disabled")
                    $('#btnSelect').attr("title", "Document Approved");
                    $('#btnSelect').prop("onclick", null);
                    $('#btnSelect').css("background", "#b2aca4");
                }
                if ($('#LatestApprovalStatus').val() == '4') {
                    $('#btnUpload').attr("disabled", "disabled")
                    $('#btnUpload').attr("title", "Document Approved");
                    $('#btnUpload').prop("onclick", null);
                    $('#btnUpload').css("background", "#b2aca4");
                    $('#btnCancel').attr("disabled", "disabled")
                    $('#btnCancel').attr("title", "Document Approved");
                    $('#btnCancel').prop("onclick", null);
                    $('#btnCancel').css("background", "#b2aca4");
                    $('#btnSelect').attr("disabled", "disabled")
                    $('#btnSelect').attr("title", "Document Approved");
                    $('#btnSelect').prop("onclick", null);
                    $('#btnSelect').css("background", "#b2aca4");
                }

            }
        }
        catch (e) {
            console.log(e.message);
        }
    });
</script>
